<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\BUILD\mbed_default.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\BUILD\mbed_default.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Tue Feb 06 13:53:48 2018
<BR><P>
<H3>Maximum Stack Usage =        776 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
perform_file_change_contents(mbed::FileSystem*) &rArr; file_printf(mbed::File*, const char*, ...) &rArr; file_write(mbed::File*, unsigned char*, unsigned) &rArr; UnityAssertEqualNumber &rArr; utest_unity_assert_failure &rArr; utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) &rArr;  utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[183]">core_util_critical_section_enter</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19e]">mbed_assert_internal</a><BR>
 <LI><a href="#[19e]">mbed_assert_internal</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1fc]">mbed_die</a><BR>
 <LI><a href="#[187]">core_util_critical_section_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19e]">mbed_assert_internal</a><BR>
 <LI><a href="#[291]">serial_writable</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19e]">mbed_assert_internal</a><BR>
 <LI><a href="#[289]">pinmap_pinout</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16a]">error</a><BR>
 <LI><a href="#[201]">pin_mode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19e]">mbed_assert_internal</a><BR>
 <LI><a href="#[202]">pin_function</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19e]">mbed_assert_internal</a><BR>
 <LI><a href="#[287]">pinmap_peripheral</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16a]">error</a><BR>
 <LI><a href="#[16e]">serial_init</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19e]">mbed_assert_internal</a><BR>
 <LI><a href="#[286]">pinmap_merge</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16a]">error</a><BR>
 <LI><a href="#[16f]">serial_baud</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19e]">mbed_assert_internal</a><BR>
 <LI><a href="#[1ec]">_gpio_init_in</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ee]">gpio_dir</a><BR>
 <LI><a href="#[1fd]">gpio_set</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19e]">mbed_assert_internal</a><BR>
 <LI><a href="#[290]">serial_set_flow_control</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[200]">gpio_init_out_ex</a><BR>
 <LI><a href="#[28e]">serial_format</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19e]">mbed_assert_internal</a><BR>
 <LI><a href="#[186]">sleep_manager_unlock_deep_sleep</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16a]">error</a><BR>
 <LI><a href="#[184]">sleep_manager_lock_deep_sleep</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16a]">error</a><BR>
 <LI><a href="#[1ea]">osRtxErrorNotify</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16a]">error</a><BR>
 <LI><a href="#[12]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">NMI_Handler</a><BR>
 <LI><a href="#[13]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">HardFault_Handler</a><BR>
 <LI><a href="#[14]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">MemManage_Handler</a><BR>
 <LI><a href="#[15]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">BusFault_Handler</a><BR>
 <LI><a href="#[16]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">UsageFault_Handler</a><BR>
 <LI><a href="#[18]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">DebugMon_Handler</a><BR>
 <LI><a href="#[31]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">ADC_IRQHandler</a><BR>
 <LI><a href="#[1d2]">utest::v1::Harness::raise_failure(utest::v1::failure_reason_t)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d2]">utest::v1::Harness::raise_failure(utest::v1::failure_reason_t)</a><BR>
 <LI><a href="#[cd]">__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[cd]">__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[46]">&lang;Func2&rang;</a> from .\build\serialbase.o(i.<Func2>) referenced from .\build\serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
 <LI><a href="#[31]">ADC_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[32]">BOD_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">BusFault_Handler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[34]">CAN_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[35]">DMA_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">DebugMon_Handler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[2d]">EINT0_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">EINT1_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[2f]">EINT2_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[30]">EINT3_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[37]">ENET_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">HardFault_Handler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[25]">I2C0_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">I2C1_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">I2C2_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[36]">I2S_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[39]">MCPWM_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">MemManage_Handler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">NMI_Handler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[2b]">PLL0_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[3b]">PLL1_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[24]">PWM1_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">PendSV_Handler</a> from .\build\irq_cm3.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[3a]">QEI_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[38]">RIT_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[2c]">RTC_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[11]">Reset_Handler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">SPI_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">SSP0_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">SSP1_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[17]">SVC_Handler</a> from .\build\irq_cm3.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">SysTick_Handler</a> from .\build\irq_cm3.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">SysTick_Handler</a> from .\build\irq_cm3.o(.text) referenced from .\build\rtx_kernel.o(i.svcRtxKernelStart)
 <LI><a href="#[3c]">SystemInit</a> from .\build\system_lpc17xx.o(i.SystemInit) referenced from .\build\startup_lpc17xx.o(.text)
 <LI><a href="#[1c]">TIMER0_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[1d]">TIMER1_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">TIMER2_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">TIMER3_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[20]">UART0_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">UART1_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">UART2_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[23]">UART3_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[33]">USB_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">UsageFault_Handler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">WDT_IRQHandler</a> from .\build\startup_lpc17xx.o(.text) referenced from .\build\startup_lpc17xx.o(RESET)
 <LI><a href="#[6b]">check_file_rename(mbed::FileSystem*)</a> from .\build\atomic_usage.o(i._Z17check_file_renamePN4mbed10FileSystemE) referenced from .\build\atomic_usage.o(.constdata)
 <LI><a href="#[f]">default_idle_hook()</a> from .\build\mbed_rtx_idle.o(i._Z17default_idle_hookv) referenced 2 times from .\build\mbed_rtx_idle.o(.data)
 <LI><a href="#[69]">setup_file_rename(mbed::FileSystem*)</a> from .\build\atomic_usage.o(i._Z17setup_file_renamePN4mbed10FileSystemE) referenced from .\build\atomic_usage.o(.constdata)
 <LI><a href="#[6a]">perform_file_rename(mbed::FileSystem*)</a> from .\build\atomic_usage.o(i._Z19perform_file_renamePN4mbed10FileSystemE) referenced from .\build\atomic_usage.o(.constdata)
 <LI><a href="#[7e]">test_failure_handler(utest::v1::failure_t)</a> from .\build\utest_greentea_handlers.o(i._Z20test_failure_handlerN5utest2v19failure_tE) referenced 2 times from .\build\utest_greentea_handlers.o(.constdata)
 <LI><a href="#[71]">check_directory_rename(mbed::FileSystem*)</a> from .\build\atomic_usage.o(i._Z22check_directory_renamePN4mbed10FileSystemE) referenced from .\build\atomic_usage.o(.constdata)
 <LI><a href="#[6f]">setup_directory_rename(mbed::FileSystem*)</a> from .\build\atomic_usage.o(i._Z22setup_directory_renamePN4mbed10FileSystemE) referenced from .\build\atomic_usage.o(.constdata)
 <LI><a href="#[70]">perform_directory_rename(mbed::FileSystem*)</a> from .\build\atomic_usage.o(i._Z24perform_directory_renamePN4mbed10FileSystemE) referenced from .\build\atomic_usage.o(.constdata)
 <LI><a href="#[83]">selftest_failure_handler(utest::v1::failure_t)</a> from .\build\utest_greentea_handlers.o(i._Z24selftest_failure_handlerN5utest2v19failure_tE) referenced from .\build\utest_greentea_handlers.o(.constdata)
 <LI><a href="#[6e]">check_file_rename_replace(mbed::FileSystem*)</a> from .\build\atomic_usage.o(i._Z25check_file_rename_replacePN4mbed10FileSystemE) referenced from .\build\atomic_usage.o(.constdata)
 <LI><a href="#[6c]">setup_file_rename_replace(mbed::FileSystem*)</a> from .\build\atomic_usage.o(i._Z25setup_file_rename_replacePN4mbed10FileSystemE) referenced from .\build\atomic_usage.o(.constdata)
 <LI><a href="#[74]">check_file_change_contents(mbed::FileSystem*)</a> from .\build\atomic_usage.o(i._Z26check_file_change_contentsPN4mbed10FileSystemE) referenced from .\build\atomic_usage.o(.constdata)
 <LI><a href="#[72]">setup_file_change_contents(mbed::FileSystem*)</a> from .\build\atomic_usage.o(i._Z26setup_file_change_contentsPN4mbed10FileSystemE) referenced from .\build\atomic_usage.o(.constdata)
 <LI><a href="#[6d]">perform_file_rename_replace(mbed::FileSystem*)</a> from .\build\atomic_usage.o(i._Z27perform_file_rename_replacePN4mbed10FileSystemE) referenced from .\build\atomic_usage.o(.constdata)
 <LI><a href="#[73]">perform_file_change_contents(mbed::FileSystem*)</a> from .\build\atomic_usage.o(i._Z28perform_file_change_contentsPN4mbed10FileSystemE) referenced from .\build\atomic_usage.o(.constdata)
 <LI><a href="#[88]">mbed::FileHandle::size()</a> from .\build\filehandle.o(i._ZN4mbed10FileHandle4sizeEv) referenced from .\build\filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[87]">mbed::FileHandle::isatty()</a> from .\build\filehandle.o(i._ZN4mbed10FileHandle6isattyEv) referenced from .\build\filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[47]">mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</a> from .\build\serialbase.o(i._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq) referenced from .\build\serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
 <LI><a href="#[8b]">mbed::Dir::open(mbed::FileSystem*, const char*)</a> from .\build\dir.o(i._ZN4mbed3Dir4openEPNS_10FileSystemEPKc) referenced from .\build\dir.o(.constdata__ZTVN4mbed3DirE)
 <LI><a href="#[8a]">mbed::Dir::close()</a> from .\build\dir.o(i._ZN4mbed3Dir5closeEv) referenced from .\build\dir.o(.constdata__ZTVN4mbed3DirE)
 <LI><a href="#[89]">mbed::Dir::~Dir()</a> from .\build\dir.o(i._ZN4mbed3DirD1Ev) referenced from .\build\dir.o(.constdata__ZTVN4mbed3DirE)
 <LI><a href="#[93]">mbed::File::open(mbed::FileSystem*, const char*, int)</a> from .\build\file.o(i._ZN4mbed4File4openEPNS_10FileSystemEPKci) referenced from .\build\file.o(.constdata__ZTVN4mbed4FileE)
 <LI><a href="#[8d]">mbed::File::read(void*, unsigned)</a> from .\build\file.o(i._ZN4mbed4File4readEPvj) referenced from .\build\file.o(.constdata__ZTVN4mbed4FileE)
 <LI><a href="#[8f]">mbed::File::seek(long, int)</a> from .\build\file.o(i._ZN4mbed4File4seekEli) referenced from .\build\file.o(.constdata__ZTVN4mbed4FileE)
 <LI><a href="#[92]">mbed::File::size()</a> from .\build\file.o(i._ZN4mbed4File4sizeEv) referenced from .\build\file.o(.constdata__ZTVN4mbed4FileE)
 <LI><a href="#[90]">mbed::File::close()</a> from .\build\file.o(i._ZN4mbed4File5closeEv) referenced from .\build\file.o(.constdata__ZTVN4mbed4FileE)
 <LI><a href="#[8e]">mbed::File::write(const void*, unsigned)</a> from .\build\file.o(i._ZN4mbed4File5writeEPKvj) referenced from .\build\file.o(.constdata__ZTVN4mbed4FileE)
 <LI><a href="#[91]">mbed::File::isatty()</a> from .\build\file.o(i._ZN4mbed4File6isattyEv) referenced from .\build\file.o(.constdata__ZTVN4mbed4FileE)
 <LI><a href="#[8c]">mbed::File::~File()</a> from .\build\file.o(i._ZN4mbed4FileD1Ev) referenced from .\build\file.o(.constdata__ZTVN4mbed4FileE)
 <LI><a href="#[95]">void mbed::Callback&lang;void()&rang;::function_call&lang;void(*)()&rang;(const void*)</a> from .\build\atcmdparser.o(t._ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv) referenced from .\build\atcmdparser.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[97]">void mbed::Callback&lang;void()&rang;::function_dtor&lang;void(*)()&rang;(void*)</a> from .\build\atcmdparser.o(t._ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv) referenced from .\build\atcmdparser.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[96]">void mbed::Callback&lang;void()&rang;::function_move&lang;void(*)()&rang;(void*, const void*)</a> from .\build\atcmdparser.o(t._ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv) referenced from .\build\atcmdparser.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[94]">mbed::DirHandle::~DirHandle__sub_object()</a> from .\build\dir.o(i._ZN4mbed9DirHandleD2Ev) referenced from .\build\dir.o(.constdata__ZTVN4mbed9DirHandleE)
 <LI><a href="#[84]">mbed::RawSerial::lock()</a> from .\build\rawserial.o(i._ZN4mbed9RawSerial4lockEv) referenced from .\build\greentea_serial.o(.constdata__ZTV14GreenteaSerial)
 <LI><a href="#[84]">mbed::RawSerial::lock()</a> from .\build\rawserial.o(i._ZN4mbed9RawSerial4lockEv) referenced from .\build\rawserial.o(.constdata__ZTVN4mbed9RawSerialE)
 <LI><a href="#[85]">mbed::RawSerial::unlock()</a> from .\build\rawserial.o(i._ZN4mbed9RawSerial6unlockEv) referenced from .\build\greentea_serial.o(.constdata__ZTV14GreenteaSerial)
 <LI><a href="#[85]">mbed::RawSerial::unlock()</a> from .\build\rawserial.o(i._ZN4mbed9RawSerial6unlockEv) referenced from .\build\rawserial.o(.constdata__ZTVN4mbed9RawSerialE)
 <LI><a href="#[48]">rtos::Semaphore::~Semaphore()</a> from .\build\semaphore.o(i._ZN4rtos9SemaphoreD1Ev) referenced from .\build\main.o(i.__sti___8_main_cpp_led1)
 <LI><a href="#[7f]">utest::v1::greentea_case_setup_handler(const utest::v1::Case*, unsigned)</a> from .\build\utest_greentea_handlers.o(i._ZN5utest2v127greentea_case_setup_handlerEPKNS0_4CaseEj) referenced 3 times from .\build\utest_greentea_handlers.o(.constdata)
 <LI><a href="#[80]">utest::v1::greentea_case_teardown_handler(const utest::v1::Case*, unsigned, unsigned, utest::v1::failure_t)</a> from .\build\utest_greentea_handlers.o(i._ZN5utest2v130greentea_case_teardown_handlerEPKNS0_4CaseEjjNS0_9failure_tE) referenced 3 times from .\build\utest_greentea_handlers.o(.constdata)
 <LI><a href="#[7d]">utest::v1::greentea_test_teardown_handler(unsigned, unsigned, utest::v1::failure_t)</a> from .\build\utest_greentea_handlers.o(i._ZN5utest2v130greentea_test_teardown_handlerEjjNS0_9failure_tE) referenced 3 times from .\build\utest_greentea_handlers.o(.constdata)
 <LI><a href="#[7c]">utest::v1::default_greentea_test_setup_handler(unsigned)</a> from .\build\utest_greentea_handlers.o(i._ZN5utest2v135default_greentea_test_setup_handlerEj) referenced 3 times from .\build\utest_greentea_handlers.o(.constdata)
 <LI><a href="#[81]">utest::v1::greentea_case_failure_abort_handler(const utest::v1::Case*, utest::v1::failure_t)</a> from .\build\utest_greentea_handlers.o(i._ZN5utest2v135greentea_case_failure_abort_handlerEPKNS0_4CaseENS0_9failure_tE) referenced from .\build\utest_greentea_handlers.o(.constdata)
 <LI><a href="#[82]">utest::v1::greentea_case_failure_continue_handler(const utest::v1::Case*, utest::v1::failure_t)</a> from .\build\utest_greentea_handlers.o(i._ZN5utest2v138greentea_case_failure_continue_handlerEPKNS0_4CaseENS0_9failure_tE) referenced 2 times from .\build\utest_greentea_handlers.o(.constdata)
 <LI><a href="#[86]">__cxa_pure_virtual</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(pure_virt.o)(i.__cxa_pure_virtual) referenced 4 times from .\build\filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[86]">__cxa_pure_virtual</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(pure_virt.o)(i.__cxa_pure_virtual) referenced 5 times from .\build\dir.o(.constdata__ZTVN4mbed9DirHandleE)
 <LI><a href="#[9a]">__main</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__main.o)(!!!main) referenced from .\build\startup_lpc17xx.o(.text)
 <LI><a href="#[98]">__sti___16_atomic_usage_cpp_6abba805</a> from .\build\atomic_usage.o(i.__sti___16_atomic_usage_cpp_6abba805) referenced from .\build\atomic_usage.o(.init_array)
 <LI><a href="#[99]">__sti___8_main_cpp_led1</a> from .\build\main.o(i.__sti___8_main_cpp_led1) referenced from .\build\main.o(.init_array)
 <LI><a href="#[3e]">_get_lc_ctype</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(lc_ctype_c.o)(locale$$code) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_ctype_table.o)(.text)
 <LI><a href="#[43]">_printf_input_char</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text)
 <LI><a href="#[42]">_sbackspace</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_sgetc.o)(.text) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(vsscanf.o)(.text)
 <LI><a href="#[44]">_scanf_char_input</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(scanf_char.o)(.text) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(scanf_char.o)(.text)
 <LI><a href="#[41]">_sgetc</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_sgetc.o)(.text) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(vsscanf.o)(.text)
 <LI><a href="#[3f]">_snputc</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_snputc.o)(.text) referenced 2 times from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(vsnprintf.o)(.text)
 <LI><a href="#[40]">_sputc</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_sputc.o)(.text) referenced 2 times from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(c89vsprintf.o)(.text)
 <LI><a href="#[45]">isspace</a> from .\build\greentea_test_env.o(i.isspace) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(scanf_char.o)(.text)
 <LI><a href="#[62]">osRtxIdleThread</a> from .\build\mbed_rtx_handlers.o(i.osRtxIdleThread) referenced from .\build\rtx_kernel.o(i.svcRtxKernelStart)
 <LI><a href="#[64]">osRtxMessageQueuePostProcess</a> from .\build\rtx_msgqueue.o(i.osRtxMessageQueuePostProcess) referenced from .\build\rtx_msgqueue.o(i.svcRtxMessageQueueNew)
 <LI><a href="#[65]">osRtxSemaphorePostProcess</a> from .\build\rtx_semaphore.o(i.osRtxSemaphorePostProcess) referenced from .\build\rtx_semaphore.o(i.svcRtxSemaphoreNew)
 <LI><a href="#[67]">osRtxThreadPostProcess</a> from .\build\rtx_thread.o(i.osRtxThreadPostProcess) referenced from .\build\rtx_thread.o(i.svcRtxThreadNew)
 <LI><a href="#[63]">osRtxTimerThread</a> from .\build\rtx_timer.o(i.osRtxTimerThread) referenced from .\build\rtx_kernel.o(i.svcRtxKernelStart)
 <LI><a href="#[55]">osRtxTimerTick</a> from .\build\rtx_timer.o(i.osRtxTimerTick) referenced from .\build\rtx_timer.o(i.osRtxTimerThread)
 <LI><a href="#[66]">osThreadExit</a> from .\build\rtx_thread.o(i.osThreadExit) referenced from .\build\rtx_thread.o(i.svcRtxThreadNew)
 <LI><a href="#[49]">pre_main</a> from .\build\mbed_boot.o(i.pre_main) referenced from .\build\mbed_boot.o(i.mbed_start_main)
 <LI><a href="#[4a]">svcRtxDelay</a> from .\build\rtx_delay.o(i.svcRtxDelay) referenced from .\build\rtx_delay.o(i.osDelay)
 <LI><a href="#[4b]">svcRtxKernelGetState</a> from .\build\rtx_kernel.o(i.svcRtxKernelGetState) referenced from .\build\rtx_kernel.o(i.osKernelGetState)
 <LI><a href="#[4c]">svcRtxKernelInitialize</a> from .\build\rtx_kernel.o(i.svcRtxKernelInitialize) referenced from .\build\rtx_kernel.o(i.osKernelInitialize)
 <LI><a href="#[4d]">svcRtxKernelStart</a> from .\build\rtx_kernel.o(i.svcRtxKernelStart) referenced from .\build\rtx_kernel.o(i.osKernelStart)
 <LI><a href="#[4e]">svcRtxMessageQueueGet</a> from .\build\rtx_msgqueue.o(i.svcRtxMessageQueueGet) referenced from .\build\rtx_msgqueue.o(i.osMessageQueueGet)
 <LI><a href="#[4f]">svcRtxMessageQueueNew</a> from .\build\rtx_msgqueue.o(i.svcRtxMessageQueueNew) referenced from .\build\rtx_msgqueue.o(i.osMessageQueueNew)
 <LI><a href="#[50]">svcRtxMessageQueuePut</a> from .\build\rtx_msgqueue.o(i.svcRtxMessageQueuePut) referenced from .\build\rtx_msgqueue.o(i.osMessageQueuePut)
 <LI><a href="#[51]">svcRtxMutexAcquire</a> from .\build\rtx_mutex.o(i.svcRtxMutexAcquire) referenced from .\build\rtx_mutex.o(i.osMutexAcquire)
 <LI><a href="#[52]">svcRtxMutexDelete</a> from .\build\rtx_mutex.o(i.svcRtxMutexDelete) referenced from .\build\rtx_mutex.o(i.osMutexDelete)
 <LI><a href="#[53]">svcRtxMutexNew</a> from .\build\rtx_mutex.o(i.svcRtxMutexNew) referenced from .\build\rtx_mutex.o(i.osMutexNew)
 <LI><a href="#[54]">svcRtxMutexRelease</a> from .\build\rtx_mutex.o(i.svcRtxMutexRelease) referenced from .\build\rtx_mutex.o(i.osMutexRelease)
 <LI><a href="#[56]">svcRtxSemaphoreAcquire</a> from .\build\rtx_semaphore.o(i.svcRtxSemaphoreAcquire) referenced from .\build\rtx_semaphore.o(i.osSemaphoreAcquire)
 <LI><a href="#[57]">svcRtxSemaphoreDelete</a> from .\build\rtx_semaphore.o(i.svcRtxSemaphoreDelete) referenced from .\build\rtx_semaphore.o(i.osSemaphoreDelete)
 <LI><a href="#[58]">svcRtxSemaphoreGetCount</a> from .\build\rtx_semaphore.o(i.svcRtxSemaphoreGetCount) referenced from .\build\rtx_semaphore.o(i.osSemaphoreGetCount)
 <LI><a href="#[59]">svcRtxSemaphoreNew</a> from .\build\rtx_semaphore.o(i.svcRtxSemaphoreNew) referenced from .\build\rtx_semaphore.o(i.osSemaphoreNew)
 <LI><a href="#[5b]">svcRtxThreadExit</a> from .\build\rtx_thread.o(i.svcRtxThreadExit) referenced from .\build\rtx_thread.o(i.osThreadExit)
 <LI><a href="#[5c]">svcRtxThreadGetId</a> from .\build\rtx_thread.o(i.svcRtxThreadGetId) referenced from .\build\rtx_thread.o(i.osThreadGetId)
 <LI><a href="#[5d]">svcRtxThreadGetName</a> from .\build\rtx_thread.o(i.svcRtxThreadGetName) referenced from .\build\rtx_thread.o(i.osThreadGetName)
 <LI><a href="#[5a]">svcRtxThreadNew</a> from .\build\rtx_thread.o(i.svcRtxThreadNew) referenced from .\build\rtx_thread.o(i.osThreadContextNew)
 <LI><a href="#[10]">ticker_irq_handler</a> from .\build\mbed_ticker_api.o(i.ticker_irq_handler) referenced 2 times from .\build\mbed_us_ticker_api.o(.data)
 <LI><a href="#[5e]">uart0_irq</a> from .\build\serial_api.o(i.uart0_irq) referenced from .\build\serial_api.o(i.serial_irq_set_internal)
 <LI><a href="#[5f]">uart1_irq</a> from .\build\serial_api.o(i.uart1_irq) referenced from .\build\serial_api.o(i.serial_irq_set_internal)
 <LI><a href="#[60]">uart2_irq</a> from .\build\serial_api.o(i.uart2_irq) referenced from .\build\serial_api.o(i.serial_irq_set_internal)
 <LI><a href="#[61]">uart3_irq</a> from .\build\serial_api.o(i.uart3_irq) referenced from .\build\serial_api.o(i.serial_irq_set_internal)
 <LI><a href="#[78]">us_ticker_clear_interrupt</a> from .\build\us_ticker.o(i.us_ticker_clear_interrupt) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[77]">us_ticker_disable_interrupt</a> from .\build\us_ticker.o(i.us_ticker_disable_interrupt) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[7a]">us_ticker_fire_interrupt</a> from .\build\us_ticker.o(i.us_ticker_fire_interrupt) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[7b]">us_ticker_get_info</a> from .\build\mbed_retarget.o(i.us_ticker_get_info) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[75]">us_ticker_init</a> from .\build\us_ticker.o(i.us_ticker_init) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[68]">us_ticker_irq_handler</a> from .\build\mbed_us_ticker_api.o(i.us_ticker_irq_handler) referenced from .\build\us_ticker.o(i.us_ticker_init)
 <LI><a href="#[76]">us_ticker_read</a> from .\build\us_ticker.o(i.us_ticker_read) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[79]">us_ticker_set_interrupt</a> from .\build\us_ticker.o(i.us_ticker_set_interrupt) referenced from .\build\mbed_us_ticker_api.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9a]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__main.o)(!!!main))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = __main &rArr; __rt_entry &rArr; mbed_start_main &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[a0]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2c2]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter), UNUSED)

<P><STRONG><a name="[2c3]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter), UNUSED)

<P><STRONG><a name="[2c4]"></a>__decompress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__dczerorl.o)(!!dczerorl), UNUSED)

<P><STRONG><a name="[2c5]"></a>__decompress0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__dczerorl.o)(!!dczerorl), UNUSED)

<P><STRONG><a name="[2c6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__scatter_zi.o)(!!handler_zi), UNUSED)

<P><STRONG><a name="[a1]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_n.o)(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[ec]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_percent.o)(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[a3]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_p.o)(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[a5]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_f.o)(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[a7]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_e.o)(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[a8]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_g.o)(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[a9]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_a.o)(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[2c7]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_ll.o)(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[ab]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_i.o)(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ad]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_d.o)(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ae]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_u.o)(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[af]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_o.o)(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[b1]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_x.o)(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[b3]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_lli.o)(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[b5]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_lld.o)(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[b6]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_llu.o)(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[b7]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_llo.o)(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[b9]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_llx.o)(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[2c8]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_l.o)(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[bb]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_c.o)(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[bd]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_s.o)(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[bf]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_lc.o)(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[c1]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_ls.o)(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[2c9]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_percent_end.o)(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[28a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit.o)(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
</UL>

<P><STRONG><a name="[2ca]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[c3]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __Heap_Initialize &rArr; _mutex_initialize &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2cb]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[2cc]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[c5]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_common &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[2cd]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[2ce]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[2cf]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[c7]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[2d0]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[2d1]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[c8]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[2d2]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2d3]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[2d4]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[2d5]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[2d6]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2d7]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2d8]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[ca]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[2d9]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2da]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[cc]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[2db]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[2dc]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[2dd]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[2de]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[2df]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[2e0]"></a>__rt_lib_shutdown_heap_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libshutdown2.o)(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2e1]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libshutdown2.o)(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[2e2]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[2e3]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[2e4]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[2e5]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[2e6]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[247]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc32_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[2e7]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[2e8]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[24b]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[2e9]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[248]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[cd]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put
</UL>

<P><STRONG><a name="[152]"></a>__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
</UL>

<P><STRONG><a name="[2ea]"></a>__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[2eb]"></a>__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[2ec]"></a>__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[2ed]"></a>__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[154]"></a>__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
</UL>

<P><STRONG><a name="[2ee]"></a>__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_inc32_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[2ef]"></a>__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[2f0]"></a>__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[151]"></a>__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
</UL>

<P><STRONG><a name="[2f1]"></a>__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[2f2]"></a>__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[ce]"></a>__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_link_put
</UL>

<P><STRONG><a name="[2f3]"></a>__asm___15_rtx_semaphore_c_eca73427__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[2f4]"></a>__asm___15_rtx_semaphore_c_eca73427__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[2f5]"></a>__asm___15_rtx_semaphore_c_eca73427__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[2f6]"></a>__asm___15_rtx_semaphore_c_eca73427__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[2f7]"></a>__asm___15_rtx_semaphore_c_eca73427__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[2f8]"></a>__asm___15_rtx_semaphore_c_eca73427__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[2f9]"></a>__asm___15_rtx_semaphore_c_eca73427__atomic_inc32_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[2fa]"></a>__asm___15_rtx_semaphore_c_eca73427__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[2fb]"></a>__asm___15_rtx_semaphore_c_eca73427__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[2fc]"></a>__asm___15_rtx_semaphore_c_eca73427__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[156]"></a>__asm___15_rtx_semaphore_c_eca73427__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
</UL>

<P><STRONG><a name="[2fd]"></a>__asm___15_rtx_semaphore_c_eca73427__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[cf]"></a>__asm___15_rtx_semaphore_c_eca73427__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_eca73427__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_eca73427__atomic_link_put
</UL>

<P><STRONG><a name="[2fe]"></a>__asm___12_rtx_system_c_024f2f18__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[2ff]"></a>__asm___12_rtx_system_c_024f2f18__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[300]"></a>__asm___12_rtx_system_c_024f2f18__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[301]"></a>__asm___12_rtx_system_c_024f2f18__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[302]"></a>__asm___12_rtx_system_c_024f2f18__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[303]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[304]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc32_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[219]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
</UL>

<P><STRONG><a name="[217]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>

<P><STRONG><a name="[305]"></a>__asm___12_rtx_system_c_024f2f18__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[216]"></a>__asm___12_rtx_system_c_024f2f18__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>

<P><STRONG><a name="[306]"></a>__asm___12_rtx_system_c_024f2f18__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[d0]"></a>__asm___12_rtx_system_c_024f2f18__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_link_put
</UL>

<P><STRONG><a name="[307]"></a>__asm___12_rtx_thread_c_add96be5__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[308]"></a>__asm___12_rtx_thread_c_add96be5__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[309]"></a>__asm___12_rtx_thread_c_add96be5__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[158]"></a>__asm___12_rtx_thread_c_add96be5__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>

<P><STRONG><a name="[159]"></a>__asm___12_rtx_thread_c_add96be5__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>

<P><STRONG><a name="[30a]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[30b]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc32_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[30c]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[30d]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[30e]"></a>__asm___12_rtx_thread_c_add96be5__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[30f]"></a>__asm___12_rtx_thread_c_add96be5__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[310]"></a>__asm___12_rtx_thread_c_add96be5__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[d1]"></a>__asm___12_rtx_thread_c_add96be5__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_link_put
</UL>

<P><STRONG><a name="[17]"></a>SVC_Handler</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, .\build\irq_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[311]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(maybetermalloc2.o)(.emb_text), UNUSED)

<P><STRONG><a name="[19]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\irq_cm3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\irq_cm3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rtx_kernel.o(i.svcRtxKernelStart)
<LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_ctype_table.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isstring(int)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbrtowc
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_errno_addr_twolibspace.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_open_errors(int, unsigned)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[312]"></a>__errno$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_errno_addr_twolibspace.o)(.text), UNUSED)

<P><STRONG><a name="[313]"></a>__rt_errno_addr$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_errno_addr_twolibspace.o)(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>_malloc_internal</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_alloc_mt.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[da]"></a>malloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_alloc_mt.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[dc]"></a>_free_internal</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_free_mt.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[dd]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_free_mt.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = free &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[168]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(lludivv7m.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_tick
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberUnsigned
</UL>

<P><STRONG><a name="[314]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(lludivv7m.o)(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(llshl.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[315]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(llshl.o)(.text), UNUSED)

<P><STRONG><a name="[167]"></a>__aeabi_llsr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(llushr.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberHex
</UL>

<P><STRONG><a name="[316]"></a>_ll_ushift_r</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(llushr.o)(.text), UNUSED)

<P><STRONG><a name="[de]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(vsnprintf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
</UL>

<P><STRONG><a name="[e0]"></a>__c89vsprintf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(c89vsprintf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_printf(mbed::File*, const char*, ...)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::printf(const char*, ...)
</UL>

<P><STRONG><a name="[e1]"></a>__c89vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(c89vsnprintf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::printf(const char*, ...)
</UL>

<P><STRONG><a name="[e2]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__2sprintf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_file_rename_replace(mbed::FileSystem*)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_write_int(int)
</UL>

<P><STRONG><a name="[e4]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_pad.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[e5]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_pad.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[e3]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_str.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[ac]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[e9]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[b2]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[ba]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[a4]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[ea]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__printf_flags_ss_wp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[ed]"></a>vsscanf</STRONG> (Thumb, 44 bytes, Stack size 56 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(vsscanf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_scanf(mbed::File*, const char*, ...)
</UL>

<P><STRONG><a name="[ef]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_scanf_int.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[317]"></a>_fclose$unlocked</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fclose.o)(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fclose.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[f5]"></a>_do_fflush</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fflush_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[f7]"></a>fflush</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fflush_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[fa]"></a>freopen</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fopen_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[fb]"></a>fopen</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fopen_locked.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[182]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(memcmp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_rename(mbed::FileSystem*)
</UL>

<P><STRONG><a name="[1b0]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(strlen.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_atomic_usage_cpp_6abba805
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[1af]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(strncmp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[20d]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_v6.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[fd]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_v6.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[318]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_v6.o)(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_w.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;&lang;unnamed namespace _17_utest_harness_cpp_5402fd79&rang;::DefaultHandlers&rang;::get()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[319]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_w.o)(.text), UNUSED)

<P><STRONG><a name="[31a]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_w.o)(.text), UNUSED)

<P><STRONG><a name="[31b]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_w.o)(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(aeabi_memset.o)(.text))
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_pad(mbed::File*, char, unsigned)
</UL>

<P><STRONG><a name="[299]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[101]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[100]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_file_rename_replace(mbed::FileSystem*)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_rename(mbed::FileSystem*)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_scanf(mbed::File*, const char*, ...)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GREENTEA_SETUP
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_stats_heap_get
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::constructor(const char*)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_led1
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[31c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text), UNUSED)

<P><STRONG><a name="[31d]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text), UNUSED)

<P><STRONG><a name="[102]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[18e]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(strcmpv7m.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GREENTEA_SETUP_COMMON(int, const char*, char*, unsigned)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[31e]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(heapauxi.o)(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(heapauxi.o)(.text), UNUSED)

<P><STRONG><a name="[3]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(heapauxi.o)(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_aeabi.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[31f]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libspace.o)(.text), UNUSED)

<P><STRONG><a name="[103]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libspace.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>

<P><STRONG><a name="[db]"></a>__rt_heap_descriptor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_heap_descriptor_twolibspace.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[c6]"></a>__rt_locale</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_locale_twolibspace.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[320]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(hguard.o)(.text), UNUSED)

<P><STRONG><a name="[321]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(hguard.o)(.text), UNUSED)

<P><STRONG><a name="[a]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[105]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[c4]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _init_alloc &rArr; __Heap_Initialize &rArr; _mutex_initialize &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[107]"></a>__Heap_Initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_init_mt.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[5]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_init_mt.o)(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_truncate.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[e7]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_truncate.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[e8]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_intcommon.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[a2]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_charcount.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[322]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_fp_dec.o)(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_fp_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[df]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[40]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_sputc.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> c89vsprintf.o(.text)
<LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_snputc.o)(.text))
<BR>[Address Reference Count : 2]<UL><LI> vsnprintf.o(.text)
<LI> c89vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[111]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[bc]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[be]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[112]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_wctomb.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[b4]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_longlong_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[114]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_oct_int_ll.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[b0]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_oct_int_ll.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[b8]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_oct_int_ll.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[f0]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_chval.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[115]"></a>_scanf_longlong</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_scanf_longlong.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_longlong
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[12d]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_scanf_str.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[ee]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(scanf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsscanf
</UL>

<P><STRONG><a name="[41]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_sgetc.o)(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsscanf.o(.text)
</UL>
<P><STRONG><a name="[42]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_sgetc.o)(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsscanf.o(.text)
</UL>
<P><STRONG><a name="[117]"></a>_scanf_mbtowc</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_scanf_mbtowc.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _scanf_mbtowc &rArr; _mbrtowc &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbrtowc
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[119]"></a>_scanf_wctomb</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_scanf_wctomb.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _scanf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[11b]"></a>_scanf_wstring</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_scanf_wstr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _scanf_wstring &rArr; _scanf_wcharmap
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[f6]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fseek.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _fseek &rArr; _sys_istty &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[323]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fseek.o)(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(stdio.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[120]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(stdio.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[f2]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(stdio.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
</UL>

<P><STRONG><a name="[123]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(stdio.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[124]"></a>setvbuf</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(setvbuf_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = setvbuf &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[cb]"></a>_initio</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(initio_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[126]"></a>_terminateio</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(initio_locked.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[127]"></a>__rt_SIGPVFN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_pvfn_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[13b]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(sys_wrch.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[135]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(sys_exit.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[104]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_extend_mt.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[10d]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(lludiv10.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[12a]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_fp_hex.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[110]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_fp_infnan.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[12b]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_wchar.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[c0]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_wchar.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[c2]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_wchar.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[116]"></a>__vfscanf</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_scanf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[131]"></a>_scanf_really_real</STRONG> (Thumb, 684 bytes, Stack size 120 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(scanf_fp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[11a]"></a>_scanf_wcharmap</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_scanf_wcharmap.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
</UL>

<P><STRONG><a name="[109]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(bigflt0.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[11d]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(ftell.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[324]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(ftell.o)(.text), UNUSED)

<P><STRONG><a name="[118]"></a>_mbrtowc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_mbrtowc.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _mbrtowc &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc
</UL>

<P><STRONG><a name="[113]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_wcrtomb.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[129]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_exit.o)(.text))
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[125]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_rtred_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[106]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_rtmem_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[128]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_pvfn_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[325]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(use_no_semi.o)(.text), UNUSED)

<P><STRONG><a name="[326]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(use_no_semi.o)(.text), UNUSED)

<P><STRONG><a name="[327]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(indicate_semi.o)(.text), UNUSED)

<P><STRONG><a name="[139]"></a>_terminate_alloc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(term_alloc.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
</UL>

<P><STRONG><a name="[138]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_general.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
</UL>

<P><STRONG><a name="[136]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_rtred_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[137]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_rtmem_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[13a]"></a>__Heap_Finalize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_final_mt.o)(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[13c]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_rserrno.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[13d]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_rserrno.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[13e]"></a>_scanf_really_hex_real</STRONG> (Thumb, 786 bytes, Stack size 80 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(scanf_hexfp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; ldexp &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[2c1]"></a>_scanf_really_infnan</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(scanf_infnan.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[10a]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[142]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[141]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[145]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[143]"></a>_e2d</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[144]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[10b]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[130]"></a>_btod_edivd</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[10c]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[12f]"></a>_btod_emuld</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[146]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[147]"></a>main</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_boot.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = main &rArr; $Super$$main &rArr; wait &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_main
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
</UL>

<P><STRONG><a name="[25c]"></a>EvrRtxEventFlagsWaitTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxEventFlagsWaitTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[22a]"></a>EvrRtxKernelError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxKernelError))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[227]"></a>EvrRtxKernelGetState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetState
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[229]"></a>EvrRtxKernelInitialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxKernelInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[293]"></a>EvrRtxKernelInitializeCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxKernelInitializeCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[22b]"></a>EvrRtxKernelStart</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxKernelStart))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[297]"></a>EvrRtxKernelStarted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxKernelStarted))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[241]"></a>EvrRtxMemoryAlloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMemoryAlloc))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>

<P><STRONG><a name="[246]"></a>EvrRtxMemoryBlockAlloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMemoryBlockAlloc))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[24a]"></a>EvrRtxMemoryBlockFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMemoryBlockFree))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[24d]"></a>EvrRtxMemoryBlockInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMemoryBlockInit))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
</UL>

<P><STRONG><a name="[243]"></a>EvrRtxMemoryFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMemoryFree))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>

<P><STRONG><a name="[245]"></a>EvrRtxMemoryInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMemoryInit))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[25f]"></a>EvrRtxMemoryPoolAllocTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMemoryPoolAllocTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[29a]"></a>EvrRtxMessageQueueCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMessageQueueCreated))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[20c]"></a>EvrRtxMessageQueueError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMessageQueueError))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[22d]"></a>EvrRtxMessageQueueGet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMessageQueueGet))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[298]"></a>EvrRtxMessageQueueGetPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMessageQueueGetPending))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[260]"></a>EvrRtxMessageQueueGetTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMessageQueueGetTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[214]"></a>EvrRtxMessageQueueInsertPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMessageQueueInsertPending))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
</UL>

<P><STRONG><a name="[252]"></a>EvrRtxMessageQueueInserted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMessageQueueInserted))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[232]"></a>EvrRtxMessageQueueNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMessageQueueNew))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>

<P><STRONG><a name="[213]"></a>EvrRtxMessageQueueNotInserted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMessageQueueNotInserted))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
</UL>

<P><STRONG><a name="[210]"></a>EvrRtxMessageQueueNotRetrieved</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMessageQueueNotRetrieved))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[234]"></a>EvrRtxMessageQueuePut</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMessageQueuePut))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[29b]"></a>EvrRtxMessageQueuePutPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMessageQueuePutPending))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[261]"></a>EvrRtxMessageQueuePutTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMessageQueuePutTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[20e]"></a>EvrRtxMessageQueueRetrieved</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMessageQueueRetrieved))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[235]"></a>EvrRtxMutexAcquire</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMutexAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[29c]"></a>EvrRtxMutexAcquirePending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMutexAcquirePending))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[25d]"></a>EvrRtxMutexAcquireTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMutexAcquireTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[255]"></a>EvrRtxMutexAcquired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMutexAcquired))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
</UL>

<P><STRONG><a name="[29f]"></a>EvrRtxMutexCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMutexCreated))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
</UL>

<P><STRONG><a name="[23b]"></a>EvrRtxMutexDelete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMutexDelete), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[29e]"></a>EvrRtxMutexDestroyed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMutexDestroyed))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[239]"></a>EvrRtxMutexError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMutexError))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[23c]"></a>EvrRtxMutexNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMutexNew))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[29d]"></a>EvrRtxMutexNotAcquired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMutexNotAcquired))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[23d]"></a>EvrRtxMutexRelease</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[254]"></a>EvrRtxMutexReleased</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxMutexReleased))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
</UL>

<P><STRONG><a name="[277]"></a>EvrRtxSemaphoreAcquire</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxSemaphoreAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>

<P><STRONG><a name="[2a0]"></a>EvrRtxSemaphoreAcquirePending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxSemaphoreAcquirePending))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[25e]"></a>EvrRtxSemaphoreAcquireTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxSemaphoreAcquireTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[257]"></a>EvrRtxSemaphoreAcquired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxSemaphoreAcquired))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
</UL>

<P><STRONG><a name="[2a3]"></a>EvrRtxSemaphoreCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxSemaphoreCreated))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
</UL>

<P><STRONG><a name="[27d]"></a>EvrRtxSemaphoreDelete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxSemaphoreDelete))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[2a1]"></a>EvrRtxSemaphoreDestroyed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxSemaphoreDestroyed))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
</UL>

<P><STRONG><a name="[27b]"></a>EvrRtxSemaphoreError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxSemaphoreError))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[2a2]"></a>EvrRtxSemaphoreGetCount</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxSemaphoreGetCount))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreGetCount
</UL>

<P><STRONG><a name="[27e]"></a>EvrRtxSemaphoreNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxSemaphoreNew))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[27c]"></a>EvrRtxSemaphoreNotAcquired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxSemaphoreNotAcquired))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[270]"></a>EvrRtxThreadBlocked</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxThreadBlocked))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[2a7]"></a>EvrRtxThreadCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxThreadCreated))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[221]"></a>EvrRtxThreadDelay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxThreadDelay))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[259]"></a>EvrRtxThreadDelayCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxThreadDelayCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[2a6]"></a>EvrRtxThreadDestroyed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxThreadDestroyed))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[222]"></a>EvrRtxThreadError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxThreadError))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadContextNew
</UL>

<P><STRONG><a name="[14b]"></a>EvrRtxThreadExit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\mbed_rtx_handlers.o(i.EvrRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvrRtxThreadExit &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_terminate_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>

<P><STRONG><a name="[26c]"></a>EvrRtxThreadFlagsWaitCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxThreadFlagsWaitCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[25a]"></a>EvrRtxThreadFlagsWaitTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxThreadFlagsWaitTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[284]"></a>EvrRtxThreadGetId</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxThreadGetId))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
</UL>

<P><STRONG><a name="[285]"></a>EvrRtxThreadGetName</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxThreadGetName))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetName
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetName
</UL>

<P><STRONG><a name="[2a4]"></a>EvrRtxThreadJoined</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxThreadJoined))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[280]"></a>EvrRtxThreadNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxThreadNew))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadContextNew
</UL>

<P><STRONG><a name="[26e]"></a>EvrRtxThreadSwitch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxThreadSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[262]"></a>EvrRtxThreadUnblocked</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxThreadUnblocked))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[274]"></a>EvrRtxTimerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(i.EvrRtxTimerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[14e]"></a>GREENTEA_SETUP</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, .\build\greentea_test_env.o(i.GREENTEA_SETUP))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = GREENTEA_SETUP &rArr; _GREENTEA_SETUP_COMMON(int, const char*, char*, unsigned) &rArr; greentea_parse_kv &rArr; HandleKV(char*, char*, int, int) &rArr; getNextToken(char*, int) &rArr; gettok(char*, int) &rArr; greentea_getc &rArr; mbed::RawSerial::getc() &rArr; mbed::SerialBase::_base_getc() &rArr; serial_getc &rArr; gpio_write &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GREENTEA_SETUP_COMMON(int, const char*, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::default_greentea_test_setup_handler(unsigned)
</UL>

<P><STRONG><a name="[273]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\os_systick.o(i.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[296]"></a>OS_Tick_Enable</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, .\build\os_systick.o(i.OS_Tick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[295]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\os_systick.o(i.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[294]"></a>OS_Tick_Setup</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, .\build\os_systick.o(i.OS_Tick_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_Tick_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[3c]"></a>SystemInit</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, .\build\system_lpc17xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[15c]"></a>UnityAssertEqualNumber</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, .\build\unity.o(i.UnityAssertEqualNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = UnityAssertEqualNumber &rArr; utest_unity_assert_failure &rArr; utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) &rArr;  utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_unity_assert_failure
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_safe_putc
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberByStyle
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsFailBegin
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAddMsgIfSpecified
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_file_change_contents(mbed::FileSystem*)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_file_change_contents(mbed::FileSystem*)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_change_contents(mbed::FileSystem*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_file_rename_replace(mbed::FileSystem*)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_rename_replace(mbed::FileSystem*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_directory_rename(mbed::FileSystem*)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_directory_rename(mbed::FileSystem*)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_directory_rename(mbed::FileSystem*)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_file_rename(mbed::FileSystem*)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_file_rename(mbed::FileSystem*)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_rename(mbed::FileSystem*)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write(mbed::File*, unsigned char*, unsigned)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_file_rename_replace(mbed::FileSystem*)
</UL>

<P><STRONG><a name="[161]"></a>UnityFail</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, .\build\unity.o(i.UnityFail))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = UnityFail &rArr; utest_unity_assert_failure &rArr; utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) &rArr;  utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_unity_assert_failure
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_safe_putc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintFail
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_file_change_contents(mbed::FileSystem*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_file_rename_replace(mbed::FileSystem*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_directory_rename(mbed::FileSystem*)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_directory_rename(mbed::FileSystem*)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_file_rename(mbed::FileSystem*)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_printf(mbed::File*, const char*, ...)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_scanf(mbed::File*, const char*, ...)
</UL>

<P><STRONG><a name="[15b]"></a>UnityPrint</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, .\build\unity.o(i.UnityPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = UnityPrint &rArr; UnityPrintNumberHex &rArr; utest_safe_putc &rArr; SingletonPtr&lang;GreenteaSerial&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_safe_putc
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberHex
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintFail
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsFailBegin
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsBegin
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAddMsgIfSpecified
</UL>

<P><STRONG><a name="[163]"></a>UnityPrintFail</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\unity.o(i.UnityPrintFail))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = UnityPrintFail &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; utest_safe_putc &rArr; SingletonPtr&lang;GreenteaSerial&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
</UL>

<P><STRONG><a name="[165]"></a>UnityPrintNumber</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, .\build\unity.o(i.UnityPrintNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = UnityPrintNumber &rArr; UnityPrintNumberUnsigned &rArr; utest_safe_putc &rArr; SingletonPtr&lang;GreenteaSerial&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_safe_putc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberUnsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberByStyle
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsBegin
</UL>

<P><STRONG><a name="[15e]"></a>UnityPrintNumberByStyle</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, .\build\unity.o(i.UnityPrintNumberByStyle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = UnityPrintNumberByStyle &rArr; UnityPrintNumber &rArr; UnityPrintNumberUnsigned &rArr; utest_safe_putc &rArr; SingletonPtr&lang;GreenteaSerial&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberUnsigned
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberHex
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
</UL>

<P><STRONG><a name="[164]"></a>UnityPrintNumberHex</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, .\build\unity.o(i.UnityPrintNumberHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = UnityPrintNumberHex &rArr; utest_safe_putc &rArr; SingletonPtr&lang;GreenteaSerial&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_safe_putc
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberByStyle
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
</UL>

<P><STRONG><a name="[166]"></a>UnityPrintNumberUnsigned</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, .\build\unity.o(i.UnityPrintNumberUnsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = UnityPrintNumberUnsigned &rArr; utest_safe_putc &rArr; SingletonPtr&lang;GreenteaSerial&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_safe_putc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberByStyle
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumber
</UL>

<P><STRONG><a name="[177]"></a>greentea_send_kv(const char*, const char*, int, int)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, .\build\greentea_test_env.o(i._Z16greentea_send_kvPKcS0_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = greentea_send_kv(const char*, const char*, int, int) &rArr; greentea_write_int(int) &rArr; SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;() &rArr; SingletonPtr&lang;GreenteaSerial&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_write_postamble()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_write_preamble()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_write_int(int)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::putc(int)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_write_string(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::greentea_case_teardown_handler(const utest::v1::Case*, unsigned, unsigned, utest::v1::failure_t)
</UL>

<P><STRONG><a name="[174]"></a>greentea_send_kv(const char*, int)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\greentea_test_env.o(i._Z16greentea_send_kvPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = greentea_send_kv(const char*, int) &rArr; greentea_write_int(int) &rArr; SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;() &rArr; SingletonPtr&lang;GreenteaSerial&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_write_postamble()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_write_preamble()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_write_int(int)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::putc(int)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_write_string(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_heap_info()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_notify_completion(int)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_notify_timeout(int)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::greentea_test_setup_handler(unsigned)
</UL>

<P><STRONG><a name="[17e]"></a>greentea_send_kv(const char*, int, int)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, .\build\greentea_test_env.o(i._Z16greentea_send_kvPKcii))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = greentea_send_kv(const char*, int, int) &rArr; greentea_write_int(int) &rArr; SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;() &rArr; SingletonPtr&lang;GreenteaSerial&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_write_postamble()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_write_preamble()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_write_int(int)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::putc(int)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_write_string(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::greentea_test_teardown_handler(unsigned, unsigned, utest::v1::failure_t)
</UL>

<P><STRONG><a name="[17c]"></a>greentea_write_int(int)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, .\build\greentea_test_env.o(i._Z18greentea_write_inti))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = greentea_write_int(int) &rArr; SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;() &rArr; SingletonPtr&lang;GreenteaSerial&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::putc(int)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv(const char*, int, int)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv(const char*, const char*, int, int)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv(const char*, int)
</UL>

<P><STRONG><a name="[14f]"></a>_GREENTEA_SETUP_COMMON(int, const char*, char*, unsigned)</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, .\build\greentea_test_env.o(i._Z22_GREENTEA_SETUP_COMMONiPKcPcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = _GREENTEA_SETUP_COMMON(int, const char*, char*, unsigned) &rArr; greentea_parse_kv &rArr; HandleKV(char*, char*, int, int) &rArr; getNextToken(char*, int) &rArr; gettok(char*, int) &rArr; greentea_getc &rArr; mbed::RawSerial::getc() &rArr; mbed::SerialBase::_base_getc() &rArr; serial_getc &rArr; gpio_write &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_parse_kv
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_notify_hosttest(const char*)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_notify_version()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_notify_timeout(int)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_write_string(const char*)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_metrics_setup()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GREENTEA_SETUP
</UL>

<P><STRONG><a name="[18c]"></a>greentea_metrics_setup()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\greentea_metrics.o(i._Z22greentea_metrics_setupv))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GREENTEA_SETUP_COMMON(int, const char*, char*, unsigned)
</UL>

<P><STRONG><a name="[194]"></a>greentea_metrics_report()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\greentea_metrics.o(i._Z23greentea_metrics_reportv))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = greentea_metrics_report() &rArr; send_heap_info() &rArr; greentea_send_kv(const char*, int) &rArr; greentea_write_int(int) &rArr; SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;() &rArr; SingletonPtr&lang;GreenteaSerial&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_heap_info()
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_notify_completion(int)
</UL>

<P><STRONG><a name="[178]"></a>greentea_write_preamble()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\greentea_test_env.o(i._Z23greentea_write_preamblev))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = greentea_write_preamble() &rArr; SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;() &rArr; SingletonPtr&lang;GreenteaSerial&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::putc(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv(const char*, int, int)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv(const char*, const char*, int, int)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv(const char*, int)
</UL>

<P><STRONG><a name="[17d]"></a>greentea_write_postamble()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, .\build\greentea_test_env.o(i._Z24greentea_write_postamblev))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = greentea_write_postamble() &rArr; SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;() &rArr; SingletonPtr&lang;GreenteaSerial&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::putc(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv(const char*, int, int)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv(const char*, const char*, int, int)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv(const char*, int)
</UL>

<P><STRONG><a name="[18b]"></a>GREENTEA_TESTSUITE_RESULT(int)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\greentea_test_env.o(i._Z25GREENTEA_TESTSUITE_RESULTi))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = GREENTEA_TESTSUITE_RESULT(int) &rArr; greentea_notify_completion(int) &rArr; greentea_metrics_report() &rArr; send_heap_info() &rArr; greentea_send_kv(const char*, int) &rArr; greentea_write_int(int) &rArr; SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;() &rArr; SingletonPtr&lang;GreenteaSerial&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_notify_completion(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::greentea_test_teardown_handler(unsigned, unsigned, utest::v1::failure_t)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest_failure_handler(utest::v1::failure_t)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_failure_handler(utest::v1::failure_t)
</UL>

<P><STRONG><a name="[6d]"></a>perform_file_rename_replace(mbed::FileSystem*)</STRONG> (Thumb, 434 bytes, Stack size 64 bytes, .\build\atomic_usage.o(i._Z27perform_file_rename_replacePN4mbed10FileSystemE))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = perform_file_rename_replace(mbed::FileSystem*) &rArr; file_printf(mbed::File*, const char*, ...) &rArr; file_write(mbed::File*, unsigned char*, unsigned) &rArr; UnityAssertEqualNumber &rArr; utest_unity_assert_failure &rArr; utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) &rArr;  utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_printf(mbed::File*, const char*, ...)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_scanf(mbed::File*, const char*, ...)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::~File()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::File()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::close()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::open(mbed::FileSystem*, const char*, int)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atomic_usage.o(.constdata)
</UL>
<P><STRONG><a name="[19b]"></a>GreenteaSerial::GreenteaSerial()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\greentea_serial.o(i._ZN14GreenteaSerialC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GreenteaSerial::GreenteaSerial() &rArr; mbed::RawSerial::RawSerial(PinName, PinName, int) &rArr; mbed::SerialBase::SerialBase(PinName, PinName, int) &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::RawSerial(PinName, PinName, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;GreenteaSerial&rang;::get()
</UL>

<P><STRONG><a name="[328]"></a>GreenteaSerial::GreenteaSerial__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\greentea_serial.o(i._ZN14GreenteaSerialC1Ev), UNUSED)

<P><STRONG><a name="[19d]"></a>mbed::DigitalOut::write(int)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, .\build\busout.o(i._ZN4mbed10DigitalOut5writeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = mbed::DigitalOut::write(int) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[88]"></a>mbed::FileHandle::size()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, .\build\filehandle.o(i._ZN4mbed10FileHandle4sizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FileHandle::size()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[87]"></a>mbed::FileHandle::isatty()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\filehandle.o(i._ZN4mbed10FileHandle6isattyEv))
<BR>[Address Reference Count : 1]<UL><LI> filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[1aa]"></a>mbed::FileHandle::FileHandle__sub_object()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\file.o(i._ZN4mbed10FileHandleC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::File()
</UL>

<P><STRONG><a name="[19f]"></a>mbed::SerialBase::_base_getc()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase10_base_getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::_base_getc() &rArr; serial_getc &rArr; gpio_write &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::getc()
</UL>

<P><STRONG><a name="[1a1]"></a>mbed::SerialBase::_base_putc(int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase10_base_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbed::SerialBase::_base_putc(int) &rArr; serial_putc &rArr; serial_writable &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::putc(int)
</UL>

<P><STRONG><a name="[47]"></a>mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::_irq_handler(unsigned, SerialIrq) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator bool() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
</UL>
<P><STRONG><a name="[1a4]"></a>mbed::SerialBase::SerialBase(PinName, PinName, int)</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mbed::SerialBase::SerialBase(PinName, PinName, int) &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::RawSerial(PinName, PinName, int)
</UL>

<P><STRONG><a name="[329]"></a>mbed::SerialBase::SerialBase__sub_object(PinName, PinName, int)</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i), UNUSED)

<P><STRONG><a name="[8b]"></a>mbed::Dir::open(mbed::FileSystem*, const char*)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, .\build\dir.o(i._ZN4mbed3Dir4openEPNS_10FileSystemEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Dir::open(mbed::FileSystem*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_directory_rename(mbed::FileSystem*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dir.o(.constdata__ZTVN4mbed3DirE)
</UL>
<P><STRONG><a name="[8a]"></a>mbed::Dir::close()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, .\build\dir.o(i._ZN4mbed3Dir5closeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::Dir::close()
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Dir::~Dir()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dir.o(.constdata__ZTVN4mbed3DirE)
</UL>
<P><STRONG><a name="[193]"></a>mbed::Dir::Dir()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\dir.o(i._ZN4mbed3DirC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Dir::Dir()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DirHandle::DirHandle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_directory_rename(mbed::FileSystem*)
</UL>

<P><STRONG><a name="[32a]"></a>mbed::Dir::Dir__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\dir.o(i._ZN4mbed3DirC1Ev), UNUSED)

<P><STRONG><a name="[89]"></a>mbed::Dir::~Dir()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\dir.o(i._ZN4mbed3DirD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Dir::~Dir() &rArr; mbed::Dir::close()
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DirHandle::~DirHandle__sub_object()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Dir::close()
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_directory_rename(mbed::FileSystem*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dir.o(.constdata__ZTVN4mbed3DirE)
</UL>
<P><STRONG><a name="[32b]"></a>mbed::Dir::~Dir__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\dir.o(i._ZN4mbed3DirD1Ev), UNUSED)

<P><STRONG><a name="[93]"></a>mbed::File::open(mbed::FileSystem*, const char*, int)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, .\build\file.o(i._ZN4mbed4File4openEPNS_10FileSystemEPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::File::open(mbed::FileSystem*, const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_file_change_contents(mbed::FileSystem*)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_file_change_contents(mbed::FileSystem*)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_change_contents(mbed::FileSystem*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_file_rename_replace(mbed::FileSystem*)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_rename_replace(mbed::FileSystem*)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_file_rename(mbed::FileSystem*)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_rename(mbed::FileSystem*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_file_rename_replace(mbed::FileSystem*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file.o(.constdata__ZTVN4mbed4FileE)
</UL>
<P><STRONG><a name="[8d]"></a>mbed::File::read(void*, unsigned)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, .\build\file.o(i._ZN4mbed4File4readEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = mbed::File::read(void*, unsigned) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_rename(mbed::FileSystem*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file.o(.constdata__ZTVN4mbed4FileE)
</UL>
<P><STRONG><a name="[8f]"></a>mbed::File::seek(long, int)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, .\build\file.o(i._ZN4mbed4File4seekEli))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = mbed::File::seek(long, int) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_file_change_contents(mbed::FileSystem*)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_change_contents(mbed::FileSystem*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file.o(.constdata__ZTVN4mbed4FileE)
</UL>
<P><STRONG><a name="[92]"></a>mbed::File::size()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\file.o(i._ZN4mbed4File4sizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = mbed::File::size() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file.o(.constdata__ZTVN4mbed4FileE)
</UL>
<P><STRONG><a name="[90]"></a>mbed::File::close()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, .\build\file.o(i._ZN4mbed4File5closeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::File::close()
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_file_change_contents(mbed::FileSystem*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::~File()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_file_rename_replace(mbed::FileSystem*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file.o(.constdata__ZTVN4mbed4FileE)
</UL>
<P><STRONG><a name="[8e]"></a>mbed::File::write(const void*, unsigned)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, .\build\file.o(i._ZN4mbed4File5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = mbed::File::write(const void*, unsigned) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_file_rename_replace(mbed::FileSystem*)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_file_rename(mbed::FileSystem*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file.o(.constdata__ZTVN4mbed4FileE)
</UL>
<P><STRONG><a name="[91]"></a>mbed::File::isatty()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\file.o(i._ZN4mbed4File6isattyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = mbed::File::isatty() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file.o(.constdata__ZTVN4mbed4FileE)
</UL>
<P><STRONG><a name="[181]"></a>mbed::File::File()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\file.o(i._ZN4mbed4FileC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::File::File()
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileHandle::FileHandle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_file_change_contents(mbed::FileSystem*)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_file_change_contents(mbed::FileSystem*)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_change_contents(mbed::FileSystem*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_file_rename_replace(mbed::FileSystem*)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_rename_replace(mbed::FileSystem*)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_file_rename(mbed::FileSystem*)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_rename(mbed::FileSystem*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_file_rename_replace(mbed::FileSystem*)
</UL>

<P><STRONG><a name="[32c]"></a>mbed::File::File__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\file.o(i._ZN4mbed4FileC1Ev), UNUSED)

<P><STRONG><a name="[8c]"></a>mbed::File::~File()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\file.o(i._ZN4mbed4FileD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::File::~File() &rArr; mbed::File::close()
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::close()
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_file_change_contents(mbed::FileSystem*)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_file_change_contents(mbed::FileSystem*)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_change_contents(mbed::FileSystem*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_file_rename_replace(mbed::FileSystem*)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_rename_replace(mbed::FileSystem*)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_file_rename(mbed::FileSystem*)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_rename(mbed::FileSystem*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_file_rename_replace(mbed::FileSystem*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file.o(.constdata__ZTVN4mbed4FileE)
</UL>
<P><STRONG><a name="[32d]"></a>mbed::File::~File__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\file.o(i._ZN4mbed4FileD1Ev), UNUSED)

<P><STRONG><a name="[1ab]"></a>mbed::BusOut::read()</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, .\build\busout.o(i._ZN4mbed6BusOut4readEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>

<P><STRONG><a name="[1b4]"></a>mbed::FileBase::getPathType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\filebase.o(i._ZN4mbed8FileBase11getPathTypeEv))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFileSystem()
</UL>

<P><STRONG><a name="[1ac]"></a>mbed::FileBase::lookup(const char*, unsigned)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, .\build\filebase.o(i._ZN4mbed8FileBase6lookupEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
</UL>

<P><STRONG><a name="[1b2]"></a>mbed::FilePath::fileSystem()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\filepath.o(i._ZN4mbed8FilePath10fileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FilePath::fileSystem() &rArr; mbed::FilePath::isFileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFileSystem()
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[1b3]"></a>mbed::FilePath::isFileSystem()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\filepath.o(i._ZN4mbed8FilePath12isFileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
</UL>

<P><STRONG><a name="[1b5]"></a>mbed::FilePath::file()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\filepath.o(i._ZN4mbed8FilePath4fileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FilePath::file() &rArr; mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[1f3]"></a>mbed::FilePath::exists()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\filepath.o(i._ZN4mbed8FilePath6existsEv))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[1b6]"></a>mbed::FilePath::isFile()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\filepath.o(i._ZN4mbed8FilePath6isFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[1f4]"></a>mbed::FilePath::fileName()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\filepath.o(i._ZN4mbed8FilePath8fileNameEv))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[1b7]"></a>mbed::FilePath::FilePath(const char*)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, .\build\filepath.o(i._ZN4mbed8FilePathC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[32e]"></a>mbed::FilePath::FilePath__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, .\build\filepath.o(i._ZN4mbed8FilePathC1EPKc), UNUSED)

<P><STRONG><a name="[1a9]"></a>mbed::DirHandle::DirHandle__sub_object()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\dir.o(i._ZN4mbed9DirHandleC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Dir::Dir()
</UL>

<P><STRONG><a name="[32f]"></a>mbed::DirHandle::~DirHandle()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\dir.o(i._ZN4mbed9DirHandleD2Ev), UNUSED)

<P><STRONG><a name="[94]"></a>mbed::DirHandle::~DirHandle__sub_object()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\dir.o(i._ZN4mbed9DirHandleD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Dir::~Dir()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dir.o(.constdata__ZTVN4mbed9DirHandleE)
</UL>
<P><STRONG><a name="[1b8]"></a>mbed::RawSerial::getc()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, .\build\rawserial.o(i._ZN4mbed9RawSerial4getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = mbed::RawSerial::getc() &rArr; mbed::SerialBase::_base_getc() &rArr; serial_getc &rArr; gpio_write &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_getc()
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_getc
</UL>

<P><STRONG><a name="[84]"></a>mbed::RawSerial::lock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rawserial.o(i._ZN4mbed9RawSerial4lockEv))
<BR>[Address Reference Count : 2]<UL><LI> greentea_serial.o(.constdata__ZTV14GreenteaSerial)
<LI> rawserial.o(.constdata__ZTVN4mbed9RawSerialE)
</UL>
<P><STRONG><a name="[17b]"></a>mbed::RawSerial::putc(int)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\build\rawserial.o(i._ZN4mbed9RawSerial4putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbed::RawSerial::putc(int) &rArr; mbed::SerialBase::_base_putc(int) &rArr; serial_putc &rArr; serial_writable &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_write_postamble()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_write_preamble()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_write_int(int)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv(const char*, int, int)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv(const char*, const char*, int, int)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_write_string(const char*)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv(const char*, int)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::puts(const char*)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_safe_putc
</UL>

<P><STRONG><a name="[1b9]"></a>mbed::RawSerial::puts(const char*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\rawserial.o(i._ZN4mbed9RawSerial4putsEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbed::RawSerial::puts(const char*) &rArr; mbed::RawSerial::putc(int) &rArr; mbed::SerialBase::_base_putc(int) &rArr; serial_putc &rArr; serial_writable &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::putc(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::printf(const char*, ...)
</UL>

<P><STRONG><a name="[1ba]"></a>mbed::RawSerial::printf(const char*, ...)</STRONG> (Thumb, 114 bytes, Stack size 160 bytes, .\build\rawserial.o(i._ZN4mbed9RawSerial6printfEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = mbed::RawSerial::printf(const char*, ...) &rArr; operator new[] (unsigned) &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::puts(const char*)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::verbose_test_teardown_handler(unsigned, unsigned, utest::v1::failure_t)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::verbose_case_teardown_handler(const utest::v1::Case*, unsigned, unsigned, utest::v1::failure_t)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::verbose_test_failure_handler(utest::v1::failure_t)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::verbose_test_setup_handler(unsigned)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::verbose_case_setup_handler(const utest::v1::Case*, unsigned)
</UL>

<P><STRONG><a name="[85]"></a>mbed::RawSerial::unlock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rawserial.o(i._ZN4mbed9RawSerial6unlockEv))
<BR>[Address Reference Count : 2]<UL><LI> greentea_serial.o(.constdata__ZTV14GreenteaSerial)
<LI> rawserial.o(.constdata__ZTVN4mbed9RawSerialE)
</UL>
<P><STRONG><a name="[19c]"></a>mbed::RawSerial::RawSerial(PinName, PinName, int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, .\build\rawserial.o(i._ZN4mbed9RawSerialC1E7PinNameS1_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mbed::RawSerial::RawSerial(PinName, PinName, int) &rArr; mbed::SerialBase::SerialBase(PinName, PinName, int) &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GreenteaSerial::GreenteaSerial()
</UL>

<P><STRONG><a name="[330]"></a>mbed::RawSerial::RawSerial__sub_object(PinName, PinName, int)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, .\build\rawserial.o(i._ZN4mbed9RawSerialC1E7PinNameS1_i), UNUSED)

<P><STRONG><a name="[1bd]"></a>rtos::Mutex::constructor(const char*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, .\build\mutex.o(i._ZN4rtos5Mutex11constructorEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
</UL>

<P><STRONG><a name="[1ae]"></a>rtos::Mutex::lock(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, .\build\mutex.o(i._ZN4rtos5Mutex4lockEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rtos::Mutex::lock(unsigned) &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[1b1]"></a>rtos::Mutex::unlock()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\mutex.o(i._ZN4rtos5Mutex6unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtos::Mutex::unlock() &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[1bf]"></a>rtos::Mutex::Mutex()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\mutex.o(i._ZN4rtos5MutexC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::constructor(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::get()
</UL>

<P><STRONG><a name="[331]"></a>rtos::Mutex::Mutex__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\mutex.o(i._ZN4rtos5MutexC1Ev), UNUSED)

<P><STRONG><a name="[1c0]"></a>rtos::Thread::wait(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\thread.o(i._ZN4rtos6Thread4waitEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtos::Thread::wait(unsigned) &rArr; osDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>

<P><STRONG><a name="[1c2]"></a>rtos::Semaphore::constructor(int, unsigned short)</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, .\build\semaphore.o(i._ZN4rtos9Semaphore11constructorEit))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = rtos::Semaphore::constructor(int, unsigned short) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::Semaphore(int)
</UL>

<P><STRONG><a name="[1c4]"></a>rtos::Semaphore::wait(unsigned)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, .\build\semaphore.o(i._ZN4rtos9Semaphore4waitEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rtos::Semaphore::wait(unsigned) &rArr; osSemaphoreAcquire &rArr; SemaphoreTokenDecrement
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreGetCount
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1c7]"></a>rtos::Semaphore::Semaphore(int)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, .\build\semaphore.o(i._ZN4rtos9SemaphoreC1Ei))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = rtos::Semaphore::Semaphore(int) &rArr; rtos::Semaphore::constructor(int, unsigned short) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::constructor(int, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_led1
</UL>

<P><STRONG><a name="[332]"></a>rtos::Semaphore::Semaphore__sub_object(int)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\semaphore.o(i._ZN4rtos9SemaphoreC1Ei), UNUSED)

<P><STRONG><a name="[48]"></a>rtos::Semaphore::~Semaphore()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\semaphore.o(i._ZN4rtos9SemaphoreD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtos::Semaphore::~Semaphore() &rArr; osSemaphoreDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_main_cpp_led1)
</UL>
<P><STRONG><a name="[333]"></a>rtos::Semaphore::~Semaphore__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\semaphore.o(i._ZN4rtos9SemaphoreD1Ev), UNUSED)

<P><STRONG><a name="[1c9]"></a>utest::v1::verbose_case_setup_handler(const utest::v1::Case*, unsigned)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, .\build\utest_default_handlers.o(i._ZN5utest2v126verbose_case_setup_handlerEPKNS0_4CaseEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = utest::v1::verbose_case_setup_handler(const utest::v1::Case*, unsigned) &rArr; mbed::RawSerial::printf(const char*, ...) &rArr; operator new[] (unsigned) &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::printf(const char*, ...)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::Case::get_description() const
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::greentea_case_setup_handler(const utest::v1::Case*, unsigned)
</UL>

<P><STRONG><a name="[1cb]"></a>utest::v1::verbose_test_setup_handler(unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\utest_default_handlers.o(i._ZN5utest2v126verbose_test_setup_handlerEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = utest::v1::verbose_test_setup_handler(unsigned) &rArr; mbed::RawSerial::printf(const char*, ...) &rArr; operator new[] (unsigned) &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::printf(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::greentea_test_setup_handler(unsigned)
</UL>

<P><STRONG><a name="[7f]"></a>utest::v1::greentea_case_setup_handler(const utest::v1::Case*, unsigned)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, .\build\utest_greentea_handlers.o(i._ZN5utest2v127greentea_case_setup_handlerEPKNS0_4CaseEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = utest::v1::greentea_case_setup_handler(const utest::v1::Case*, unsigned) &rArr; utest::v1::verbose_case_setup_handler(const utest::v1::Case*, unsigned) &rArr; mbed::RawSerial::printf(const char*, ...) &rArr; operator new[] (unsigned) &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::Case::get_description() const
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::verbose_case_setup_handler(const utest::v1::Case*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest_greentea_handlers.o(.constdata)
</UL>
<P><STRONG><a name="[1cc]"></a>utest::v1::greentea_test_setup_handler(unsigned)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\utest_greentea_handlers.o(i._ZN5utest2v127greentea_test_setup_handlerEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = utest::v1::greentea_test_setup_handler(unsigned) &rArr; utest::v1::verbose_test_setup_handler(unsigned) &rArr; mbed::RawSerial::printf(const char*, ...) &rArr; operator new[] (unsigned) &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv(const char*, int)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::verbose_test_setup_handler(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::default_greentea_test_setup_handler(unsigned)
</UL>

<P><STRONG><a name="[1cd]"></a>utest::v1::verbose_case_failure_handler(const utest::v1::Case*, utest::v1::failure_t)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, .\build\utest_default_handlers.o(i._ZN5utest2v128verbose_case_failure_handlerEPKNS0_4CaseENS0_9failure_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = utest::v1::verbose_case_failure_handler(const utest::v1::Case*, utest::v1::failure_t) &rArr; utest::v1::verbose_test_failure_handler(utest::v1::failure_t) &rArr; mbed::RawSerial::printf(const char*, ...) &rArr; operator new[] (unsigned) &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::failure_t::failure_t(const utest::v1::failure_t&)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::verbose_test_failure_handler(utest::v1::failure_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::greentea_case_failure_continue_handler(const utest::v1::Case*, utest::v1::failure_t)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::greentea_case_failure_abort_handler(const utest::v1::Case*, utest::v1::failure_t)
</UL>

<P><STRONG><a name="[18a]"></a>utest::v1::verbose_test_failure_handler(utest::v1::failure_t)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, .\build\utest_default_handlers.o(i._ZN5utest2v128verbose_test_failure_handlerENS0_9failure_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = utest::v1::verbose_test_failure_handler(utest::v1::failure_t) &rArr; mbed::RawSerial::printf(const char*, ...) &rArr; operator new[] (unsigned) &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::printf(const char*, ...)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::stringify(utest::v1::failure_reason_t)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::stringify(utest::v1::location_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest_failure_handler(utest::v1::failure_t)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_failure_handler(utest::v1::failure_t)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::verbose_case_failure_handler(const utest::v1::Case*, utest::v1::failure_t)
</UL>

<P><STRONG><a name="[1d0]"></a>utest::v1::verbose_case_teardown_handler(const utest::v1::Case*, unsigned, unsigned, utest::v1::failure_t)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, .\build\utest_default_handlers.o(i._ZN5utest2v129verbose_case_teardown_handlerEPKNS0_4CaseEjjNS0_9failure_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = utest::v1::verbose_case_teardown_handler(const utest::v1::Case*, unsigned, unsigned, utest::v1::failure_t) &rArr; mbed::RawSerial::printf(const char*, ...) &rArr; operator new[] (unsigned) &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::printf(const char*, ...)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::Case::get_description() const
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::stringify(utest::v1::failure_reason_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::greentea_case_teardown_handler(const utest::v1::Case*, unsigned, unsigned, utest::v1::failure_t)
</UL>

<P><STRONG><a name="[1d1]"></a>utest::v1::verbose_test_teardown_handler(unsigned, unsigned, utest::v1::failure_t)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, .\build\utest_default_handlers.o(i._ZN5utest2v129verbose_test_teardown_handlerEjjNS0_9failure_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = utest::v1::verbose_test_teardown_handler(unsigned, unsigned, utest::v1::failure_t) &rArr; mbed::RawSerial::printf(const char*, ...) &rArr; operator new[] (unsigned) &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::printf(const char*, ...)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::stringify(utest::v1::failure_reason_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::greentea_test_teardown_handler(unsigned, unsigned, utest::v1::failure_t)
</UL>

<P><STRONG><a name="[80]"></a>utest::v1::greentea_case_teardown_handler(const utest::v1::Case*, unsigned, unsigned, utest::v1::failure_t)</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, .\build\utest_greentea_handlers.o(i._ZN5utest2v130greentea_case_teardown_handlerEPKNS0_4CaseEjjNS0_9failure_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = utest::v1::greentea_case_teardown_handler(const utest::v1::Case*, unsigned, unsigned, utest::v1::failure_t) &rArr; utest::v1::verbose_case_teardown_handler(const utest::v1::Case*, unsigned, unsigned, utest::v1::failure_t) &rArr; mbed::RawSerial::printf(const char*, ...) &rArr; operator new[] (unsigned) &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv(const char*, const char*, int, int)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::Case::get_description() const
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::failure_t::failure_t(const utest::v1::failure_t&)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::verbose_case_teardown_handler(const utest::v1::Case*, unsigned, unsigned, utest::v1::failure_t)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest_greentea_handlers.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>utest::v1::greentea_test_teardown_handler(unsigned, unsigned, utest::v1::failure_t)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, .\build\utest_greentea_handlers.o(i._ZN5utest2v130greentea_test_teardown_handlerEjjNS0_9failure_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = utest::v1::greentea_test_teardown_handler(unsigned, unsigned, utest::v1::failure_t) &rArr; utest::v1::verbose_test_teardown_handler(unsigned, unsigned, utest::v1::failure_t) &rArr; mbed::RawSerial::printf(const char*, ...) &rArr; operator new[] (unsigned) &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GREENTEA_TESTSUITE_RESULT(int)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv(const char*, int, int)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::failure_t::failure_t(const utest::v1::failure_t&)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::verbose_test_teardown_handler(unsigned, unsigned, utest::v1::failure_t)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest_greentea_handlers.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>utest::v1::default_greentea_test_setup_handler(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\utest_greentea_handlers.o(i._ZN5utest2v135default_greentea_test_setup_handlerEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = utest::v1::default_greentea_test_setup_handler(unsigned) &rArr; utest::v1::greentea_test_setup_handler(unsigned) &rArr; utest::v1::verbose_test_setup_handler(unsigned) &rArr; mbed::RawSerial::printf(const char*, ...) &rArr; operator new[] (unsigned) &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GREENTEA_SETUP
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::greentea_test_setup_handler(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest_greentea_handlers.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>utest::v1::greentea_case_failure_abort_handler(const utest::v1::Case*, utest::v1::failure_t)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, .\build\utest_greentea_handlers.o(i._ZN5utest2v135greentea_case_failure_abort_handlerEPKNS0_4CaseENS0_9failure_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = utest::v1::greentea_case_failure_abort_handler(const utest::v1::Case*, utest::v1::failure_t) &rArr; utest::v1::verbose_case_failure_handler(const utest::v1::Case*, utest::v1::failure_t) &rArr; utest::v1::verbose_test_failure_handler(utest::v1::failure_t) &rArr; mbed::RawSerial::printf(const char*, ...) &rArr; operator new[] (unsigned) &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::failure_t::failure_t(const utest::v1::failure_t&)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::verbose_case_failure_handler(const utest::v1::Case*, utest::v1::failure_t)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest_greentea_handlers.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>utest::v1::greentea_case_failure_continue_handler(const utest::v1::Case*, utest::v1::failure_t)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, .\build\utest_greentea_handlers.o(i._ZN5utest2v138greentea_case_failure_continue_handlerEPKNS0_4CaseENS0_9failure_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = utest::v1::greentea_case_failure_continue_handler(const utest::v1::Case*, utest::v1::failure_t) &rArr; utest::v1::verbose_case_failure_handler(const utest::v1::Case*, utest::v1::failure_t) &rArr; utest::v1::verbose_test_failure_handler(utest::v1::failure_t) &rArr; mbed::RawSerial::printf(const char*, ...) &rArr; operator new[] (unsigned) &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::failure_t::failure_t(const utest::v1::failure_t&)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::verbose_case_failure_handler(const utest::v1::Case*, utest::v1::failure_t)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest_greentea_handlers.o(.constdata)
</UL>
<P><STRONG><a name="[1d2]"></a>utest::v1::Harness::raise_failure(utest::v1::failure_reason_t)</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, .\build\utest_harness.o(i._ZN5utest2v17Harness13raise_failureENS0_16failure_reason_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) &rArr;  utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_v1_leave_critical_section
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_v1_enter_critical_section
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::Harness::raise_failure(utest::v1::failure_reason_t)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;&lang;unnamed namespace _17_utest_harness_cpp_5402fd79&rang;::DefaultHandlers&rang;::operator -&rang;()
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::failure_t::failure_t(utest::v1::failure_reason_t, utest::v1::location_t)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::failure_t::failure_t(const utest::v1::failure_t&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::Harness::raise_failure(utest::v1::failure_reason_t)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_unity_assert_failure
</UL>

<P><STRONG><a name="[1d4]"></a>utest::v1::failure_t::failure_t(utest::v1::failure_reason_t, utest::v1::location_t)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\utest_harness.o(i._ZN5utest2v19failure_tC1ENS0_16failure_reason_tENS0_10location_tE))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::Harness::raise_failure(utest::v1::failure_reason_t)
</UL>

<P><STRONG><a name="[334]"></a>utest::v1::failure_t::failure_t__sub_object(utest::v1::failure_reason_t, utest::v1::location_t)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\utest_harness.o(i._ZN5utest2v19failure_tC1ENS0_16failure_reason_tENS0_10location_tE), UNUSED)

<P><STRONG><a name="[189]"></a>utest::v1::failure_t::failure_t(const utest::v1::failure_t&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\utest_default_handlers.o(i._ZN5utest2v19failure_tC1ERKS1_))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::Harness::raise_failure(utest::v1::failure_reason_t)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::greentea_case_failure_continue_handler(const utest::v1::Case*, utest::v1::failure_t)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::greentea_case_failure_abort_handler(const utest::v1::Case*, utest::v1::failure_t)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::greentea_test_teardown_handler(unsigned, unsigned, utest::v1::failure_t)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::greentea_case_teardown_handler(const utest::v1::Case*, unsigned, unsigned, utest::v1::failure_t)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftest_failure_handler(utest::v1::failure_t)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_failure_handler(utest::v1::failure_t)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::verbose_case_failure_handler(const utest::v1::Case*, utest::v1::failure_t)
</UL>

<P><STRONG><a name="[335]"></a>utest::v1::failure_t::failure_t__sub_object(const utest::v1::failure_t&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\utest_default_handlers.o(i._ZN5utest2v19failure_tC1ERKS1_), UNUSED)

<P><STRONG><a name="[1ce]"></a>utest::v1::stringify(utest::v1::location_t)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, .\build\utest_types.o(i._ZN5utest2v19stringifyENS0_10location_tE))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::verbose_test_failure_handler(utest::v1::failure_t)
</UL>

<P><STRONG><a name="[1cf]"></a>utest::v1::stringify(utest::v1::failure_reason_t)</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, .\build\utest_types.o(i._ZN5utest2v19stringifyENS0_16failure_reason_tE))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::verbose_test_teardown_handler(unsigned, unsigned, utest::v1::failure_t)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::verbose_case_teardown_handler(const utest::v1::Case*, unsigned, unsigned, utest::v1::failure_t)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::verbose_test_failure_handler(utest::v1::failure_t)
</UL>

<P><STRONG><a name="[1ca]"></a>utest::v1::Case::get_description() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\utest_case.o(i._ZNK5utest2v14Case15get_descriptionEv))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::greentea_case_teardown_handler(const utest::v1::Case*, unsigned, unsigned, utest::v1::failure_t)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::greentea_case_setup_handler(const utest::v1::Case*, unsigned)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::verbose_case_teardown_handler(const utest::v1::Case*, unsigned, unsigned, utest::v1::failure_t)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::verbose_case_setup_handler(const utest::v1::Case*, unsigned)
</UL>

<P><STRONG><a name="[1bc]"></a>operator delete[] (void*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator delete[] (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::printf(const char*, ...)
</UL>

<P><STRONG><a name="[1bb]"></a>operator new[] (unsigned)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = operator new[] (unsigned) &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::printf(const char*, ...)
</UL>

<P><STRONG><a name="[10f]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\m_ws.l(fpclassify.o)(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[1e7]"></a>__aeabi_atexit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i.__aeabi_atexit))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_led1
</UL>

<P><STRONG><a name="[1a5]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(aeabi_vec_ctor_nocookie_nodtor.o)(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>

<P><STRONG><a name="[86]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(pure_virt.o)(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dir.o(.constdata__ZTVN4mbed9DirHandleE)
<LI> filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[1d8]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\m_ws.l(dunder.o)(i.__mathlib_dbl_overflow))
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[1da]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\m_ws.l(dunder.o)(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[134]"></a>__mathlib_narrow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\m_ws.l(narrow.o)(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __mathlib_narrow &rArr; __mathlib_tofloat &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1db]"></a>__mathlib_tofloat</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\m_ws.l(narrow.o)(i.__mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __mathlib_tofloat &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[9f]"></a>__rt_entry</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, .\build\mbed_boot.o(i.__rt_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = __rt_entry &rArr; mbed_start_main &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start_main
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_set_stack_heap
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_cpy_nvic
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[140]"></a>__support_ldexp</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\m_ws.l(ldexp.o)(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __support_ldexp &rArr; ldexp &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[d6]"></a>__user_perthread_libspace</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, .\build\rtx_lib.o(i.__user_perthread_libspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[1e0]"></a>__user_setup_stackheap</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, .\build\mbed_retarget.o(i.__user_setup_stackheap))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __user_setup_stackheap &rArr; _mbed_user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbed_user_setup_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[eb]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__printf_wp.o)(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1eb]"></a>_mbed_user_setup_stackheap</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, .\build\mbed_retarget.o(i._mbed_user_setup_stackheap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _mbed_user_setup_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[9b]"></a>_mutex_acquire</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\rtx_lib.o(i._mutex_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _mutex_acquire &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>

<P><STRONG><a name="[fc]"></a>_mutex_initialize</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, .\build\mbed_boot.o(i._mutex_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _mutex_initialize &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>

<P><STRONG><a name="[9c]"></a>_mutex_release</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\rtx_lib.o(i._mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>

<P><STRONG><a name="[1e4]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\rtx_lib.o(i._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[f3]"></a>_sys_close</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _sys_close &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[11e]"></a>_sys_flen</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _sys_flen &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[11c]"></a>_sys_istty</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._sys_istty))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _sys_istty &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[f9]"></a>_sys_open</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, .\build\mbed_retarget.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = _sys_open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileName()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::exists()
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_open_errors(int, unsigned)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_serial()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[121]"></a>_sys_seek</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(i._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _sys_seek &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[122]"></a>_sys_write</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, .\build\mbed_retarget.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _sys_write &rArr; init_serial() &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_serial()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[28b]"></a>_ticker_match_interval_passed</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\mbed_ticker_api.o(i._ticker_match_interval_passed))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>

<P><STRONG><a name="[1f8]"></a>core_util_are_interrupts_enabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\mbed_critical.o(i.core_util_are_interrupts_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>

<P><STRONG><a name="[1f6]"></a>core_util_atomic_decr_u16</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\mbed_critical.o(i.core_util_atomic_decr_u16))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = core_util_atomic_decr_u16 &rArr; core_util_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep
</UL>

<P><STRONG><a name="[1f7]"></a>core_util_atomic_incr_u16</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\mbed_critical.o(i.core_util_atomic_incr_u16))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = core_util_atomic_incr_u16 &rArr; core_util_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep
</UL>

<P><STRONG><a name="[183]"></a>core_util_critical_section_enter</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, .\build\mbed_critical.o(i.core_util_critical_section_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = core_util_critical_section_enter &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_are_interrupts_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_incr_u16
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_decr_u16
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_v1_enter_critical_section
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
</UL>

<P><STRONG><a name="[187]"></a>core_util_critical_section_exit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, .\build\mbed_critical.o(i.core_util_critical_section_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = core_util_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_are_interrupts_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_incr_u16
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_decr_u16
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_v1_leave_critical_section
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
</UL>

<P><STRONG><a name="[16a]"></a>error</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, .\build\mbed_error.o(i.error))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_file_change_contents(mbed::FileSystem*)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_file_change_contents(mbed::FileSystem*)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_change_contents(mbed::FileSystem*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_file_rename_replace(mbed::FileSystem*)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_rename_replace(mbed::FileSystem*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_directory_rename(mbed::FileSystem*)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_directory_rename(mbed::FileSystem*)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_directory_rename(mbed::FileSystem*)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_file_rename(mbed::FileSystem*)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_file_rename(mbed::FileSystem*)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_rename(mbed::FileSystem*)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_printf(mbed::File*, const char*, ...)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write(mbed::File*, unsigned char*, unsigned)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_scanf(mbed::File*, const char*, ...)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_file_rename_replace(mbed::FileSystem*)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start_main
</UL>

<P><STRONG><a name="[1d7]"></a>exit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i.exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_interface_connected
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semihost_exit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::Harness::raise_failure(utest::v1::failure_reason_t)
</UL>

<P><STRONG><a name="[1dc]"></a>frexp</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\m_ws.l(frexp.o)(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = frexp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[2af]"></a>get_us_ticker_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_us_ticker_api.o(i.get_us_ticker_data))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>

<P><STRONG><a name="[1ee]"></a>gpio_dir</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, .\build\gpio_api.o(i.gpio_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = gpio_dir &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
</UL>

<P><STRONG><a name="[1ed]"></a>gpio_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\build\gpio_api.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gpio_init &rArr; gpio_set &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
</UL>

<P><STRONG><a name="[1fe]"></a>gpio_init_in</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\build\mbed_gpio.o(i.gpio_init_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gpio_init_in &rArr; gpio_init_in_ex &rArr; _gpio_init_in &rArr;  gpio_dir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_set_flow_control
</UL>

<P><STRONG><a name="[1ff]"></a>gpio_init_in_ex</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, .\build\mbed_gpio.o(i.gpio_init_in_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gpio_init_in_ex &rArr; _gpio_init_in &rArr;  gpio_dir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
</UL>

<P><STRONG><a name="[1e6]"></a>gpio_init_out</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\build\mbed_gpio.o(i.gpio_init_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_dir &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_led1
</UL>

<P><STRONG><a name="[200]"></a>gpio_init_out_ex</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, .\build\mbed_gpio.o(i.gpio_init_out_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_dir &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_set_flow_control
</UL>

<P><STRONG><a name="[1ef]"></a>gpio_mode</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, .\build\gpio_api.o(i.gpio_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gpio_mode &rArr; pin_mode &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
</UL>

<P><STRONG><a name="[1fd]"></a>gpio_set</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\gpio_api.o(i.gpio_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = gpio_set &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[197]"></a>greentea_getc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\greentea_test_env.o(i.greentea_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = greentea_getc &rArr; mbed::RawSerial::getc() &rArr; mbed::SerialBase::_base_getc() &rArr; serial_getc &rArr; gpio_write &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::getc()
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettok(char*, int)
</UL>

<P><STRONG><a name="[18d]"></a>greentea_parse_kv</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, .\build\greentea_test_env.o(i.greentea_parse_kv))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = greentea_parse_kv &rArr; HandleKV(char*, char*, int, int) &rArr; getNextToken(char*, int) &rArr; gettok(char*, int) &rArr; greentea_getc &rArr; mbed::RawSerial::getc() &rArr; mbed::SerialBase::_base_getc() &rArr; serial_getc &rArr; gpio_write &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKV(char*, char*, int, int)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextToken(char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GREENTEA_SETUP_COMMON(int, const char*, char*, unsigned)
</UL>

<P><STRONG><a name="[18f]"></a>greentea_send_kv</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\build\greentea_test_env.o(i.greentea_send_kv))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = greentea_send_kv &rArr; greentea_write_string(const char*) &rArr; SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;() &rArr; SingletonPtr&lang;GreenteaSerial&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_write_postamble()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_write_preamble()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::putc(int)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_write_string(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GREENTEA_SETUP_COMMON(int, const char*, char*, unsigned)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_notify_completion(int)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_notify_hosttest(const char*)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_notify_version()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::greentea_case_setup_handler(const utest::v1::Case*, unsigned)
</UL>

<P><STRONG><a name="[205]"></a>hal_deepsleep</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\sleep.o(i.hal_deepsleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_deepsleep &rArr; hal_sleep &rArr; mbed_interface_disconnect &rArr; semihost_disabledebug
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_interface_disconnect
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
</UL>

<P><STRONG><a name="[207]"></a>hal_sleep</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\sleep.o(i.hal_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_sleep &rArr; mbed_interface_disconnect &rArr; semihost_disabledebug
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_interface_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_deepsleep
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
</UL>

<P><STRONG><a name="[45]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\greentea_test_env.o(i.isspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isspace &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isstring(int)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettok(char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[1e8]"></a>ldexp</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\m_ws.l(ldexp.o)(i.ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ldexp &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[149]"></a>$Super$$main</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, .\build\main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = $Super$$main &rArr; wait &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::write(int)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::wait(unsigned)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19e]"></a>mbed_assert_internal</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, .\build\mbed_assert.o(i.mbed_assert_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::write(int)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BusOut::read()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::write(const void*, unsigned)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::seek(long, int)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::read(void*, unsigned)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::isatty()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::size()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;GreenteaSerial&rang;::get()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::get()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::constructor(const char*)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_irq_handler(unsigned, SerialIrq)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_writable
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_format
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::constructor(int, unsigned short)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;&lang;unnamed namespace _17_utest_harness_cpp_5402fd79&rang;::DefaultHandlers&rang;::get()
</UL>

<P><STRONG><a name="[1fc]"></a>mbed_die</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, .\build\mbed_board.o(i.mbed_die))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[21b]"></a>mbed_error_printf</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, .\build\mbed_board.o(i.mbed_error_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = mbed_error_printf &rArr; mbed_error_vfprintf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>

<P><STRONG><a name="[1f9]"></a>mbed_error_vfprintf</STRONG> (Thumb, 72 bytes, Stack size 152 bytes, .\build\mbed_board.o(i.mbed_error_vfprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = mbed_error_vfprintf &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
</UL>

<P><STRONG><a name="[1fa]"></a>mbed_interface_connected</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_interface.o(i.mbed_interface_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed_interface_connected
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semihost_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_interface_disconnect
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[206]"></a>mbed_interface_disconnect</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, .\build\mbed_interface.o(i.mbed_interface_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed_interface_disconnect &rArr; semihost_disabledebug
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semihost_disabledebug
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_interface_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_deepsleep
</UL>

<P><STRONG><a name="[148]"></a>mbed_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mbed_boot.o(i.mbed_main))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e3]"></a>mbed_sdk_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mbed_boot.o(i.mbed_sdk_init))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1e1]"></a>mbed_set_stack_heap</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, .\build\mbed_boot.o(i.mbed_set_stack_heap))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1e5]"></a>mbed_start_main</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, .\build\mbed_boot.o(i.mbed_start_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = mbed_start_main &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[173]"></a>mbed_stats_heap_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\mbed_alloc_wrappers.o(i.mbed_stats_heap_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbed_stats_heap_get &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_heap_info()
</UL>

<P><STRONG><a name="[1c1]"></a>osDelay</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, .\build\rtx_delay.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::wait(unsigned)
</UL>

<P><STRONG><a name="[223]"></a>osKernelGetState</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(i.osKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetState
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[1f2]"></a>osKernelInitialize</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialize
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[220]"></a>osKernelStart</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osKernelStart &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStart
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start_main
</UL>

<P><STRONG><a name="[22c]"></a>osMessageQueueGet</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(i.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[231]"></a>osMessageQueueNew</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, .\build\rtx_msgqueue.o(i.osMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osMessageQueueNew
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNew
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[233]"></a>osMessageQueuePut</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(i.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[176]"></a>osMutexAcquire</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(i.osMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock(unsigned)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;GreenteaSerial&rang;::get()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_lock()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;&lang;unnamed namespace _17_utest_harness_cpp_5402fd79&rang;::DefaultHandlers&rang;::get()
</UL>

<P><STRONG><a name="[23a]"></a>osMutexDelete</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, .\build\rtx_mutex.o(i.osMutexDelete), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDelete
</UL>

<P><STRONG><a name="[1be]"></a>osMutexNew</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(i.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osMutexNew
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNew
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::constructor(const char*)
</UL>

<P><STRONG><a name="[180]"></a>osMutexRelease</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, .\build\rtx_mutex.o(i.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexRelease
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;GreenteaSerial&rang;::get()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_unlock()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;&lang;unnamed namespace _17_utest_harness_cpp_5402fd79&rang;::DefaultHandlers&rang;::get()
</UL>

<P><STRONG><a name="[1ea]"></a>osRtxErrorNotify</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, .\build\mbed_rtx_handlers.o(i.osRtxErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetName
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>

<P><STRONG><a name="[62]"></a>osRtxIdleThread</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\mbed_rtx_handlers.o(i.osRtxIdleThread))
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos_idle_loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.svcRtxKernelStart)
</UL>
<P><STRONG><a name="[240]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, .\build\rtx_memory.o(i.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[242]"></a>osRtxMemoryFree</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, .\build\rtx_memory.o(i.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxMemoryFree
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[244]"></a>osRtxMemoryInit</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, .\build\rtx_memory.o(i.osRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxMemoryInit
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[212]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, .\build\rtx_mempool.o(i.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_get
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_inc32_lt
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[249]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, .\build\rtx_mempool.o(i.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_dec32_nz
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockFree
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[24c]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, .\build\rtx_mempool.o(i.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[64]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(i.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[253]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(i.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[d2]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, .\build\rtx_system.o(i.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[20f]"></a>osRtxPostProcess</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, .\build\rtx_system.o(i.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[65]"></a>osRtxSemaphorePostProcess</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, .\build\rtx_semaphore.o(i.osRtxSemaphorePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxSemaphorePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.svcRtxSemaphoreNew)
</UL>
<P><STRONG><a name="[267]"></a>osRtxThreadBlock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osRtxThreadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[271]"></a>osRtxThreadDelayInsert</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osRtxThreadDelayInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[272]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osRtxThreadDelayRemove))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[258]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = osRtxThreadDelayTick &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitTimeout
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDelayCompleted
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocTimeout
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitTimeout
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[256]"></a>osRtxThreadDispatch</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[24f]"></a>osRtxThreadListGet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[26b]"></a>osRtxThreadListPut</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, .\build\rtx_thread.o(i.osRtxThreadListPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[263]"></a>osRtxThreadListRemove</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[25b]"></a>osRtxThreadListRoot</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osRtxThreadListRoot))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[26a]"></a>osRtxThreadListSort</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.osRtxThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[67]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[264]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osRtxThreadReadyPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[251]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osRtxThreadRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[26d]"></a>osRtxThreadStackCheck</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osRtxThreadStackCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[268]"></a>osRtxThreadSwitch</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osRtxThreadSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitch
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[26f]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadBlocked
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[250]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, .\build\rtx_thread.o(i.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[d3]"></a>osRtxTick_Handler</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, .\build\rtx_system.o(i.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[63]"></a>osRtxTimerThread</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, .\build\rtx_timer.o(i.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.svcRtxKernelStart)
</UL>
<P><STRONG><a name="[55]"></a>osRtxTimerTick</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, .\build\rtx_timer.o(i.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerUnlink
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(i.osRtxTimerThread)
</UL>
<P><STRONG><a name="[1c5]"></a>osSemaphoreAcquire</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, .\build\rtx_semaphore.o(i.osSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSemaphoreAcquire &rArr; SemaphoreTokenDecrement
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNotAcquired
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::wait(unsigned)
</UL>

<P><STRONG><a name="[1c8]"></a>osSemaphoreDelete</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, .\build\rtx_semaphore.o(i.osSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osSemaphoreDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::~Semaphore()
</UL>

<P><STRONG><a name="[1c6]"></a>osSemaphoreGetCount</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\rtx_semaphore.o(i.osSemaphoreGetCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osSemaphoreGetCount &rArr; svcRtxSemaphoreGetCount
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreGetCount
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::wait(unsigned)
</UL>

<P><STRONG><a name="[1c3]"></a>osSemaphoreNew</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, .\build\rtx_semaphore.o(i.osSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osSemaphoreNew
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNew
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::constructor(int, unsigned short)
</UL>

<P><STRONG><a name="[27f]"></a>osThreadContextNew</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, .\build\rtx_thread.o(i.osThreadContextNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osThreadContextNew
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[66]"></a>osThreadExit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osThreadExit &rArr; EvrRtxThreadExit &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[14c]"></a>osThreadGetId</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[23e]"></a>osThreadGetName</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osThreadGetName))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osThreadGetName
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetName
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>

<P><STRONG><a name="[21f]"></a>osThreadNew</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osThreadNew &rArr; osThreadContextNew
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadContextNew
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start_main
</UL>

<P><STRONG><a name="[202]"></a>pin_function</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, .\build\pinmap.o(i.pin_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = pin_function &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>

<P><STRONG><a name="[201]"></a>pin_mode</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, .\build\pinmap.o(i.pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = pin_mode &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[288]"></a>pinmap_find_peripheral</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\mbed_pinmap_common.o(i.pinmap_find_peripheral))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_set_flow_control
</UL>

<P><STRONG><a name="[286]"></a>pinmap_merge</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\build\mbed_pinmap_common.o(i.pinmap_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = pinmap_merge &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[287]"></a>pinmap_peripheral</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\mbed_pinmap_common.o(i.pinmap_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = pinmap_peripheral &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_find_peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[289]"></a>pinmap_pinout</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, .\build\mbed_pinmap_common.o(i.pinmap_pinout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = pinmap_pinout &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_set_flow_control
</UL>

<P><STRONG><a name="[49]"></a>pre_main</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, .\build\mbed_boot.o(i.pre_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = pre_main &rArr; main &rArr; $Super$$main &rArr; wait &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_boot.o(i.mbed_start_main)
</UL>
<P><STRONG><a name="[23f]"></a>rtos_idle_loop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\mbed_rtx_idle.o(i.rtos_idle_loop))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>

<P><STRONG><a name="[21d]"></a>semihost_connected</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\mbed_semihost_api.o(i.semihost_connected))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_interface_connected
</UL>

<P><STRONG><a name="[21e]"></a>semihost_disabledebug</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_semihost_api.o(i.semihost_disabledebug))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = semihost_disabledebug
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_interface_disconnect
</UL>

<P><STRONG><a name="[1fb]"></a>semihost_exit</STRONG> (Thumb, 12 bytes, Stack size 24 bytes, .\build\mbed_semihost_api.o(i.semihost_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = semihost_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[16f]"></a>serial_baud</STRONG> (Thumb, 470 bytes, Stack size 48 bytes, .\build\serial_api.o(i.serial_baud))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = serial_baud &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_serial()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>

<P><STRONG><a name="[28e]"></a>serial_format</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, .\build\serial_api.o(i.serial_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = serial_format &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[1a0]"></a>serial_getc</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, .\build\serial_api.o(i.serial_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = serial_getc &rArr; gpio_write &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_readable
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_getc()
</UL>

<P><STRONG><a name="[16e]"></a>serial_init</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, .\build\serial_api.o(i.serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + In Cycle
<LI>Call Chain = serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_set_flow_control
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_format
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_serial()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>

<P><STRONG><a name="[1a8]"></a>serial_irq_handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\serial_api.o(i.serial_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = serial_irq_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>

<P><STRONG><a name="[1a2]"></a>serial_putc</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, .\build\serial_api.o(i.serial_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = serial_putc &rArr; serial_writable &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_writable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
</UL>

<P><STRONG><a name="[28f]"></a>serial_readable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\serial_api.o(i.serial_readable))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
</UL>

<P><STRONG><a name="[290]"></a>serial_set_flow_control</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, .\build\serial_api.o(i.serial_set_flow_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + In Cycle
<LI>Call Chain = serial_set_flow_control &rArr;  gpio_init_out_ex (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_find_peripheral
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_flow_irq_set
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[291]"></a>serial_writable</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, .\build\serial_api.o(i.serial_writable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = serial_writable &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>

<P><STRONG><a name="[292]"></a>sleep_manager_can_deep_sleep</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\mbed_sleep_manager.o(i.sleep_manager_can_deep_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
</UL>

<P><STRONG><a name="[184]"></a>sleep_manager_lock_deep_sleep</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\build\mbed_sleep_manager.o(i.sleep_manager_lock_deep_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = sleep_manager_lock_deep_sleep &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_incr_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>

<P><STRONG><a name="[185]"></a>sleep_manager_sleep_auto</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\mbed_sleep_manager.o(i.sleep_manager_sleep_auto))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sleep_manager_sleep_auto &rArr; hal_deepsleep &rArr; hal_sleep &rArr; mbed_interface_disconnect &rArr; semihost_disabledebug
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_deepsleep
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_can_deep_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
</UL>

<P><STRONG><a name="[186]"></a>sleep_manager_unlock_deep_sleep</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\build\mbed_sleep_manager.o(i.sleep_manager_unlock_deep_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = sleep_manager_unlock_deep_sleep &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_decr_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>

<P><STRONG><a name="[4a]"></a>svcRtxDelay</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\rtx_delay.o(i.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(i.osDelay)
</UL>
<P><STRONG><a name="[4b]"></a>svcRtxKernelGetState</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(i.svcRtxKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelGetState)
</UL>
<P><STRONG><a name="[4c]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 660 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(i.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxKernelInitialize &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitializeCompleted
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelInitialize)
</UL>
<P><STRONG><a name="[4d]"></a>svcRtxKernelStart</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(i.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = svcRtxKernelStart &rArr; svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStarted
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelStart)
</UL>
<P><STRONG><a name="[4e]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, .\build\rtx_msgqueue.o(i.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = svcRtxMessageQueueGet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetPending
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueueGet)
</UL>
<P><STRONG><a name="[4f]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, .\build\rtx_msgqueue.o(i.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueCreated
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueueNew)
</UL>
<P><STRONG><a name="[50]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, .\build\rtx_msgqueue.o(i.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = svcRtxMessageQueuePut &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutPending
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueuePut)
</UL>
<P><STRONG><a name="[51]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, .\build\rtx_mutex.o(i.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNotAcquired
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquirePending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexAcquire)
</UL>
<P><STRONG><a name="[52]"></a>svcRtxMutexDelete</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, .\build\rtx_mutex.o(i.svcRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = svcRtxMutexDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDestroyed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexDelete)
</UL>
<P><STRONG><a name="[53]"></a>svcRtxMutexNew</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, .\build\rtx_mutex.o(i.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxMutexNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexCreated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexNew)
</UL>
<P><STRONG><a name="[54]"></a>svcRtxMutexRelease</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, .\build\rtx_mutex.o(i.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexRelease)
</UL>
<P><STRONG><a name="[56]"></a>svcRtxSemaphoreAcquire</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, .\build\rtx_semaphore.o(i.svcRtxSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxSemaphoreAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNotAcquired
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquirePending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreAcquire)
</UL>
<P><STRONG><a name="[57]"></a>svcRtxSemaphoreDelete</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, .\build\rtx_semaphore.o(i.svcRtxSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxSemaphoreDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreDestroyed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreDelete)
</UL>
<P><STRONG><a name="[58]"></a>svcRtxSemaphoreGetCount</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, .\build\rtx_semaphore.o(i.svcRtxSemaphoreGetCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcRtxSemaphoreGetCount
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreGetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreGetCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreGetCount)
</UL>
<P><STRONG><a name="[59]"></a>svcRtxSemaphoreNew</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, .\build\rtx_semaphore.o(i.svcRtxSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxSemaphoreNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreCreated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreNew)
</UL>
<P><STRONG><a name="[5b]"></a>svcRtxThreadExit</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSetRunning
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[5c]"></a>svcRtxThreadGetId</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.svcRtxThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadGetId)
</UL>
<P><STRONG><a name="[5d]"></a>svcRtxThreadGetName</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.svcRtxThreadGetName))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcRtxThreadGetName
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadGetName)
</UL>
<P><STRONG><a name="[5a]"></a>svcRtxThreadNew</STRONG> (Thumb, 632 bytes, Stack size 64 bytes, .\build\rtx_thread.o(i.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadCreated
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadContextNew)
</UL>
<P><STRONG><a name="[14d]"></a>thread_terminate_hook</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\thread.o(i.thread_terminate_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = thread_terminate_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
</UL>

<P><STRONG><a name="[10]"></a>ticker_irq_handler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(i.ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ticker_irq_handler &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.data)
</UL>
<P><STRONG><a name="[2a8]"></a>ticker_read</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_ticker_api.o(i.ticker_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>

<P><STRONG><a name="[2a9]"></a>ticker_read_us</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\mbed_ticker_api.o(i.ticker_read_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read
</UL>

<P><STRONG><a name="[5e]"></a>uart0_irq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\serial_api.o(i.uart0_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = uart0_irq &rArr; uart_irq &rArr; gpio_write &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_irq_set_internal)
</UL>
<P><STRONG><a name="[5f]"></a>uart1_irq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\serial_api.o(i.uart1_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = uart1_irq &rArr; uart_irq &rArr; gpio_write &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_irq_set_internal)
</UL>
<P><STRONG><a name="[60]"></a>uart2_irq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\serial_api.o(i.uart2_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = uart2_irq &rArr; uart_irq &rArr; gpio_write &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_irq_set_internal)
</UL>
<P><STRONG><a name="[61]"></a>uart3_irq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\serial_api.o(i.uart3_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = uart3_irq &rArr; uart_irq &rArr; gpio_write &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_irq_set_internal)
</UL>
<P><STRONG><a name="[78]"></a>us_ticker_clear_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\us_ticker.o(i.us_ticker_clear_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>us_ticker_disable_interrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\us_ticker.o(i.us_ticker_disable_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>us_ticker_fire_interrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\us_ticker.o(i.us_ticker_fire_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>us_ticker_get_info</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i.us_ticker_get_info))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>us_ticker_init</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, .\build\us_ticker.o(i.us_ticker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = us_ticker_init
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>us_ticker_irq_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\mbed_us_ticker_api.o(i.us_ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = us_ticker_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> us_ticker.o(i.us_ticker_init)
</UL>
<P><STRONG><a name="[76]"></a>us_ticker_read</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, .\build\us_ticker.o(i.us_ticker_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = us_ticker_read &rArr; us_ticker_init
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>us_ticker_set_interrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\us_ticker.o(i.us_ticker_set_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[15f]"></a>utest_safe_putc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, .\build\unity_handler.o(i.utest_safe_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = utest_safe_putc &rArr; SingletonPtr&lang;GreenteaSerial&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;GreenteaSerial&rang;::get()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::putc(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberUnsigned
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumberHex
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumber
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsFailBegin
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsBegin
</UL>

<P><STRONG><a name="[160]"></a>utest_unity_assert_failure</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\unity_handler.o(i.utest_unity_assert_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = utest_unity_assert_failure &rArr; utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) &rArr;  utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::Harness::raise_failure(utest::v1::failure_reason_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
</UL>

<P><STRONG><a name="[1d5]"></a>utest_v1_enter_critical_section</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed-utest-shim.o(i.utest_v1_enter_critical_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = utest_v1_enter_critical_section &rArr; core_util_critical_section_enter &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::Harness::raise_failure(utest::v1::failure_reason_t)
</UL>

<P><STRONG><a name="[1d6]"></a>utest_v1_leave_critical_section</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed-utest-shim.o(i.utest_v1_leave_critical_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = utest_v1_leave_critical_section &rArr; core_util_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::Harness::raise_failure(utest::v1::failure_reason_t)
</UL>

<P><STRONG><a name="[21a]"></a>wait</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\mbed_wait_api_rtos.o(i.wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = wait &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[21c]"></a>wait_ms</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\mbed_wait_api_rtos.o(i.wait_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[2ae]"></a>wait_us</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, .\build\mbed_wait_api_rtos.o(i.wait_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_are_interrupts_enabled
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_ticker_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::wait(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>

<P><STRONG><a name="[3e]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(lc_ctype_c.o)(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(lc_numeric_c.o)(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[2ab]"></a>SingletonPtr&lang;GreenteaSerial&rang;::get()</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, .\build\greentea_test_env.o(t._ZN12SingletonPtrI14GreenteaSerialE3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = SingletonPtr&lang;GreenteaSerial&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GreenteaSerial::GreenteaSerial()
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;()
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_safe_putc
</UL>

<P><STRONG><a name="[17a]"></a>SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\greentea_test_env.o(t._ZN12SingletonPtrI14GreenteaSerialEptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;() &rArr; SingletonPtr&lang;GreenteaSerial&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;GreenteaSerial&rang;::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_write_postamble()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_write_preamble()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_write_int(int)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_getc
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv(const char*, int, int)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv(const char*, const char*, int, int)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_write_string(const char*)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv(const char*, int)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::verbose_test_teardown_handler(unsigned, unsigned, utest::v1::failure_t)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::verbose_case_teardown_handler(const utest::v1::Case*, unsigned, unsigned, utest::v1::failure_t)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::verbose_test_failure_handler(utest::v1::failure_t)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::verbose_test_setup_handler(unsigned)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::verbose_case_setup_handler(const utest::v1::Case*, unsigned)
</UL>

<P><STRONG><a name="[2b0]"></a>SingletonPtr&lang;&lang;unnamed namespace _17_utest_harness_cpp_5402fd79&rang;::DefaultHandlers&rang;::get()</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, .\build\utest_harness.o(t._ZN12SingletonPtrIN41_GLOBAL__N__17_utest_harness_cpp_5402fd7915DefaultHandlersEE3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = SingletonPtr&lang;&lang;unnamed namespace _17_utest_harness_cpp_5402fd79&rang;::DefaultHandlers&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;&lang;unnamed namespace _17_utest_harness_cpp_5402fd79&rang;::DefaultHandlers&rang;::operator -&rang;()
</UL>

<P><STRONG><a name="[1d3]"></a>SingletonPtr&lang;&lang;unnamed namespace _17_utest_harness_cpp_5402fd79&rang;::DefaultHandlers&rang;::operator -&rang;()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\utest_harness.o(t._ZN12SingletonPtrIN41_GLOBAL__N__17_utest_harness_cpp_5402fd7915DefaultHandlersEEptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = SingletonPtr&lang;&lang;unnamed namespace _17_utest_harness_cpp_5402fd79&rang;::DefaultHandlers&rang;::operator -&rang;() &rArr; SingletonPtr&lang;&lang;unnamed namespace _17_utest_harness_cpp_5402fd79&rang;::DefaultHandlers&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;&lang;unnamed namespace _17_utest_harness_cpp_5402fd79&rang;::DefaultHandlers&rang;::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::Harness::raise_failure(utest::v1::failure_reason_t)
</UL>

<P><STRONG><a name="[2b1]"></a>SingletonPtr&lang;rtos::Mutex&rang;::get()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(t._ZN12SingletonPtrIN4rtos5MutexEE3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_unlock()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_lock()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()
</UL>

<P><STRONG><a name="[1ad]"></a>SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\fatfilesystem.o(t._ZN12SingletonPtrIN4rtos5MutexEEptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[95]"></a>void mbed::Callback&lang;void()&rang;::function_call&lang;void(*)()&rang;(const void*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\atcmdparser.o(t._ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = void mbed::Callback&lang;void()&rang;::function_call&lang;void(*)()&rang;(const void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atcmdparser.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[97]"></a>void mbed::Callback&lang;void()&rang;::function_dtor&lang;void(*)()&rang;(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\atcmdparser.o(t._ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv))
<BR>[Address Reference Count : 1]<UL><LI> atcmdparser.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[96]"></a>void mbed::Callback&lang;void()&rang;::function_move&lang;void(*)()&rang;(void*, const void*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\atcmdparser.o(t._ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv))
<BR>[Address Reference Count : 1]<UL><LI> atcmdparser.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[14a]"></a>mbed::Callback&lang;void()&rang;::Callback(void(*)())</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, .\build\can.o(t._ZN4mbed8CallbackIFvvEEC1EPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Callback&lang;void()&rang;::Callback(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func2&rang;
</UL>

<P><STRONG><a name="[336]"></a>mbed::Callback&lang;void()&rang;::Callback__sub_object(void(*)())</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\can.o(t._ZN4mbed8CallbackIFvvEEC1EPS1_), UNUSED)

<P><STRONG><a name="[2b2]"></a>mbed::Callback&lang;void()&rang;::Callback(const mbed::Callback&lang;void()&rang;&)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, .\build\socket.o(t._ZN4mbed8CallbackIFvvEEC1ERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::Callback&lang;void()&rang;::Callback(const mbed::Callback&lang;void()&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)
</UL>

<P><STRONG><a name="[337]"></a>mbed::Callback&lang;void()&rang;::Callback__sub_object(const mbed::Callback&lang;void()&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\socket.o(t._ZN4mbed8CallbackIFvvEEC1ERKS2_), UNUSED)

<P><STRONG><a name="[1a7]"></a>mbed::Callback&lang;void()&rang;::~Callback()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\can.o(t._ZN4mbed8CallbackIFvvEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Callback&lang;void()&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)
</UL>

<P><STRONG><a name="[338]"></a>mbed::Callback&lang;void()&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\can.o(t._ZN4mbed8CallbackIFvvEED1Ev), UNUSED)

<P><STRONG><a name="[1a6]"></a>mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\socket.o(t._ZN4mbed8CallbackIFvvEEaSERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&) &rArr; mbed::Callback&lang;void()&rang;::Callback(const mbed::Callback&lang;void()&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(const mbed::Callback&lang;void()&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>

<P><STRONG><a name="[1a3]"></a>mbed::Callback&lang;void()&rang;::operator bool() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\can.o(t._ZNK4mbed8CallbackIFvvEEcvbEv))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_irq_handler(unsigned, SerialIrq)
</UL>

<P><STRONG><a name="[1de]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(d2f.o)(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[2b3]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(d2f.o)(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2b6]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(dcheck1.o)(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[2b9]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(dcmpi.o)(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[1dd]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(deqf.o)(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[2b8]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(deqf.o)(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[339]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(dleqf.o)(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[2ba]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(dleqf.o)(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[2bc]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(dleqf.o)(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[2b5]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(dnaninf.o)(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[1df]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(drleqf.o)(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[2bb]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(drleqf.o)(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[2ad]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(ffix.o)(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>

<P><STRONG><a name="[2bd]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(ffix.o)(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[2ac]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(fmul.o)(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>

<P><STRONG><a name="[2bf]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(fmul.o)(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[2be]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(fnaninf.o)(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
</UL>

<P><STRONG><a name="[2b4]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(fretinf.o)(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[6]"></a>__ieee_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(istatus.o)(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[a6]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(printf1.o)(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[aa]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(printf2.o)(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[2b7]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(retnan.o)(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[1d9]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(scalbn.o)(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[12c]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(scanf1.o)(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[133]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(scanf2.o)(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; ldexp &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[132]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(scanf2.o)(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[2c0]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(trapv.o)(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[169]"></a>file_scanf(mbed::File*, const char*, ...)</STRONG> (Thumb, 108 bytes, Stack size 104 bytes, .\build\atomic_usage.o(i._Z10file_scanfPN4mbed4FileEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = file_scanf(mbed::File*, const char*, ...) &rArr; UnityFail &rArr; utest_unity_assert_failure &rArr; utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) &rArr;  utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsscanf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_file_change_contents(mbed::FileSystem*)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_change_contents(mbed::FileSystem*)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_file_rename_replace(mbed::FileSystem*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_file_rename_replace(mbed::FileSystem*)
</UL>

<P><STRONG><a name="[16b]"></a>file_write(mbed::File*, unsigned char*, unsigned)</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, .\build\atomic_usage.o(i._Z10file_writePN4mbed4FileEPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = file_write(mbed::File*, unsigned char*, unsigned) &rArr; UnityAssertEqualNumber &rArr; utest_unity_assert_failure &rArr; utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) &rArr;  utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_pad(mbed::File*, char, unsigned)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_printf(mbed::File*, const char*, ...)
</UL>

<P><STRONG><a name="[16c]"></a>file_printf(mbed::File*, const char*, ...)</STRONG> (Thumb, 88 bytes, Stack size 96 bytes, .\build\atomic_usage.o(i._Z11file_printfPN4mbed4FileEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = file_printf(mbed::File*, const char*, ...) &rArr; file_write(mbed::File*, unsigned char*, unsigned) &rArr; UnityAssertEqualNumber &rArr; utest_unity_assert_failure &rArr; utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) &rArr;  utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write(mbed::File*, unsigned char*, unsigned)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_file_change_contents(mbed::FileSystem*)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_file_change_contents(mbed::FileSystem*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_file_rename_replace(mbed::FileSystem*)
</UL>

<P><STRONG><a name="[6b]"></a>check_file_rename(mbed::FileSystem*)</STRONG> (Thumb, 220 bytes, Stack size 112 bytes, .\build\atomic_usage.o(i._Z17check_file_renamePN4mbed10FileSystemE))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = check_file_rename(mbed::FileSystem*) &rArr; UnityAssertEqualNumber &rArr; utest_unity_assert_failure &rArr; utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) &rArr;  utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::~File()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::File()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::read(void*, unsigned)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::open(mbed::FileSystem*, const char*, int)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atomic_usage.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>setup_file_rename(mbed::FileSystem*)</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, .\build\atomic_usage.o(i._Z17setup_file_renamePN4mbed10FileSystemE))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = setup_file_rename(mbed::FileSystem*) &rArr; UnityAssertEqualNumber &rArr; utest_unity_assert_failure &rArr; utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) &rArr;  utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::~File()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::File()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::write(const void*, unsigned)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::open(mbed::FileSystem*, const char*, int)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atomic_usage.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>perform_file_rename(mbed::FileSystem*)</STRONG> (Thumb, 142 bytes, Stack size 80 bytes, .\build\atomic_usage.o(i._Z19perform_file_renamePN4mbed10FileSystemE))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = perform_file_rename(mbed::FileSystem*) &rArr; UnityAssertEqualNumber &rArr; utest_unity_assert_failure &rArr; utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) &rArr;  utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atomic_usage.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>check_directory_rename(mbed::FileSystem*)</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, .\build\atomic_usage.o(i._Z22check_directory_renamePN4mbed10FileSystemE))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = check_directory_rename(mbed::FileSystem*) &rArr; UnityAssertEqualNumber &rArr; utest_unity_assert_failure &rArr; utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) &rArr;  utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Dir::~Dir()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Dir::Dir()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Dir::open(mbed::FileSystem*, const char*)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atomic_usage.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>setup_directory_rename(mbed::FileSystem*)</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, .\build\atomic_usage.o(i._Z22setup_directory_renamePN4mbed10FileSystemE))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = setup_directory_rename(mbed::FileSystem*) &rArr; UnityAssertEqualNumber &rArr; utest_unity_assert_failure &rArr; utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) &rArr;  utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atomic_usage.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>perform_directory_rename(mbed::FileSystem*)</STRONG> (Thumb, 146 bytes, Stack size 80 bytes, .\build\atomic_usage.o(i._Z24perform_directory_renamePN4mbed10FileSystemE))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = perform_directory_rename(mbed::FileSystem*) &rArr; UnityAssertEqualNumber &rArr; utest_unity_assert_failure &rArr; utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) &rArr;  utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atomic_usage.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>check_file_rename_replace(mbed::FileSystem*)</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, .\build\atomic_usage.o(i._Z25check_file_rename_replacePN4mbed10FileSystemE))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = check_file_rename_replace(mbed::FileSystem*) &rArr; file_scanf(mbed::File*, const char*, ...) &rArr; UnityFail &rArr; utest_unity_assert_failure &rArr; utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) &rArr;  utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_scanf(mbed::File*, const char*, ...)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::~File()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::File()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::open(mbed::FileSystem*, const char*, int)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atomic_usage.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>setup_file_rename_replace(mbed::FileSystem*)</STRONG> (Thumb, 192 bytes, Stack size 120 bytes, .\build\atomic_usage.o(i._Z25setup_file_rename_replacePN4mbed10FileSystemE))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = setup_file_rename_replace(mbed::FileSystem*) &rArr; UnityAssertEqualNumber &rArr; utest_unity_assert_failure &rArr; utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) &rArr;  utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::~File()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::File()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::write(const void*, unsigned)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::open(mbed::FileSystem*, const char*, int)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atomic_usage.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>check_file_change_contents(mbed::FileSystem*)</STRONG> (Thumb, 274 bytes, Stack size 64 bytes, .\build\atomic_usage.o(i._Z26check_file_change_contentsPN4mbed10FileSystemE))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = check_file_change_contents(mbed::FileSystem*) &rArr; file_scanf(mbed::File*, const char*, ...) &rArr; UnityFail &rArr; utest_unity_assert_failure &rArr; utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) &rArr;  utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_scanf(mbed::File*, const char*, ...)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::~File()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::File()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::seek(long, int)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::open(mbed::FileSystem*, const char*, int)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atomic_usage.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>setup_file_change_contents(mbed::FileSystem*)</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, .\build\atomic_usage.o(i._Z26setup_file_change_contentsPN4mbed10FileSystemE))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = setup_file_change_contents(mbed::FileSystem*) &rArr; file_printf(mbed::File*, const char*, ...) &rArr; file_write(mbed::File*, unsigned char*, unsigned) &rArr; UnityAssertEqualNumber &rArr; utest_unity_assert_failure &rArr; utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) &rArr;  utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_pad(mbed::File*, char, unsigned)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_printf(mbed::File*, const char*, ...)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::~File()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::File()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::open(mbed::FileSystem*, const char*, int)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atomic_usage.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>perform_file_change_contents(mbed::FileSystem*)</STRONG> (Thumb, 362 bytes, Stack size 72 bytes, .\build\atomic_usage.o(i._Z28perform_file_change_contentsPN4mbed10FileSystemE))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = perform_file_change_contents(mbed::FileSystem*) &rArr; file_printf(mbed::File*, const char*, ...) &rArr; file_write(mbed::File*, unsigned char*, unsigned) &rArr; UnityAssertEqualNumber &rArr; utest_unity_assert_failure &rArr; utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) &rArr;  utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_printf(mbed::File*, const char*, ...)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_scanf(mbed::File*, const char*, ...)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::~File()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::File()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::close()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::seek(long, int)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::File::open(mbed::FileSystem*, const char*, int)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atomic_usage.o(.constdata)
</UL>
<P><STRONG><a name="[196]"></a>file_pad(mbed::File*, char, unsigned)</STRONG> (Thumb, 64 bytes, Stack size 88 bytes, .\build\atomic_usage.o(i._Z8file_padPN4mbed4FileEcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = file_pad(mbed::File*, char, unsigned) &rArr; file_write(mbed::File*, unsigned char*, unsigned) &rArr; UnityAssertEqualNumber &rArr; utest_unity_assert_failure &rArr; utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) &rArr;  utest::v1::Harness::raise_failure(utest::v1::failure_reason_t) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write(mbed::File*, unsigned char*, unsigned)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_file_change_contents(mbed::FileSystem*)
</UL>

<P><STRONG><a name="[98]"></a>__sti___16_atomic_usage_cpp_6abba805</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\atomic_usage.o(i.__sti___16_atomic_usage_cpp_6abba805))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __sti___16_atomic_usage_cpp_6abba805 &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atomic_usage.o(.init_array)
</UL>
<P><STRONG><a name="[172]"></a>send_heap_info()</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, .\build\greentea_metrics.o(i._Z14send_heap_infov))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = send_heap_info() &rArr; greentea_send_kv(const char*, int) &rArr; greentea_write_int(int) &rArr; SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;() &rArr; SingletonPtr&lang;GreenteaSerial&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_stats_heap_get
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv(const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_metrics_report()
</UL>

<P><STRONG><a name="[170]"></a>getNextToken(char*, int)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, .\build\greentea_test_env.o(i._Z12getNextTokenPci))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = getNextToken(char*, int) &rArr; gettok(char*, int) &rArr; greentea_getc &rArr; mbed::RawSerial::getc() &rArr; mbed::SerialBase::_base_getc() &rArr; serial_getc &rArr; gpio_write &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettok(char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_parse_kv
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKV(char*, char*, int, int)
</UL>

<P><STRONG><a name="[19a]"></a>ispunctuation(int)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\greentea_test_env.o(i._Z13ispunctuationi))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isstring(int)
</UL>

<P><STRONG><a name="[179]"></a>greentea_write_string(const char*)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, .\build\greentea_test_env.o(i._Z21greentea_write_stringPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = greentea_write_string(const char*) &rArr; SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;() &rArr; SingletonPtr&lang;GreenteaSerial&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::putc(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GREENTEA_SETUP_COMMON(int, const char*, char*, unsigned)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv(const char*, int, int)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv(const char*, const char*, int, int)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv(const char*, int)
</UL>

<P><STRONG><a name="[191]"></a>greentea_notify_timeout(int)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\greentea_test_env.o(i._Z23greentea_notify_timeouti))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = greentea_notify_timeout(int) &rArr; greentea_send_kv(const char*, int) &rArr; greentea_write_int(int) &rArr; SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;() &rArr; SingletonPtr&lang;GreenteaSerial&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv(const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GREENTEA_SETUP_COMMON(int, const char*, char*, unsigned)
</UL>

<P><STRONG><a name="[190]"></a>greentea_notify_version()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\greentea_test_env.o(i._Z23greentea_notify_versionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = greentea_notify_version() &rArr; greentea_send_kv &rArr; greentea_write_string(const char*) &rArr; SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;() &rArr; SingletonPtr&lang;GreenteaSerial&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GREENTEA_SETUP_COMMON(int, const char*, char*, unsigned)
</UL>

<P><STRONG><a name="[192]"></a>greentea_notify_hosttest(const char*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\greentea_test_env.o(i._Z24greentea_notify_hosttestPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = greentea_notify_hosttest(const char*) &rArr; greentea_send_kv &rArr; greentea_write_string(const char*) &rArr; SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;() &rArr; SingletonPtr&lang;GreenteaSerial&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GREENTEA_SETUP_COMMON(int, const char*, char*, unsigned)
</UL>

<P><STRONG><a name="[195]"></a>greentea_notify_completion(int)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\greentea_test_env.o(i._Z26greentea_notify_completioni))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = greentea_notify_completion(int) &rArr; greentea_metrics_report() &rArr; send_heap_info() &rArr; greentea_send_kv(const char*, int) &rArr; greentea_write_int(int) &rArr; SingletonPtr&lang;GreenteaSerial&rang;::operator -&rang;() &rArr; SingletonPtr&lang;GreenteaSerial&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_send_kv(const char*, int)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_metrics_report()
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GREENTEA_TESTSUITE_RESULT(int)
</UL>

<P><STRONG><a name="[171]"></a>gettok(char*, int)</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, .\build\greentea_test_env.o(i._Z6gettokPci))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = gettok(char*, int) &rArr; greentea_getc &rArr; mbed::RawSerial::getc() &rArr; mbed::SerialBase::_base_getc() &rArr; serial_getc &rArr; gpio_write &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_getc
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isstring(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextToken(char*, int)
</UL>

<P><STRONG><a name="[199]"></a>HandleKV(char*, char*, int, int)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, .\build\greentea_test_env.o(i._Z8HandleKVPcS_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = HandleKV(char*, char*, int, int) &rArr; getNextToken(char*, int) &rArr; gettok(char*, int) &rArr; greentea_getc &rArr; mbed::RawSerial::getc() &rArr; mbed::SerialBase::_base_getc() &rArr; serial_getc &rArr; gpio_write &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextToken(char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greentea_parse_kv
</UL>

<P><STRONG><a name="[198]"></a>isstring(int)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, .\build\greentea_test_env.o(i._Z8isstringi))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isstring(int) &rArr; isspace &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispunctuation(int)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettok(char*, int)
</UL>

<P><STRONG><a name="[203]"></a>gpio_write</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\mbed_board.o(i.gpio_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = gpio_write &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[1e2]"></a>mbed_cpy_nvic</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\mbed_boot.o(i.mbed_cpy_nvic))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1ec]"></a>_gpio_init_in</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\mbed_gpio.o(i._gpio_init_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = _gpio_init_in &rArr;  gpio_dir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in_ex
</UL>

<P><STRONG><a name="[1f0]"></a>_gpio_init_out</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, .\build\mbed_gpio.o(i._gpio_init_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = _gpio_init_out &rArr; gpio_dir &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
</UL>

<P><STRONG><a name="[1f1]"></a>gpio_write</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\mbed_gpio.o(i.gpio_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = gpio_write &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
</UL>

<P><STRONG><a name="[16d]"></a>init_serial()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._Z11init_serialv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = init_serial() &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[175]"></a>singleton_lock()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._Z14singleton_lockv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = singleton_lock() &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::get()
</UL>

<P><STRONG><a name="[17f]"></a>singleton_unlock()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._Z16singleton_unlockv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = singleton_unlock() &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::get()
</UL>

<P><STRONG><a name="[188]"></a>handle_open_errors(int, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._Z18handle_open_errorsij))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = handle_open_errors(int, unsigned) &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[f]"></a>default_idle_hook()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\mbed_rtx_idle.o(i._Z17default_idle_hookv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = default_idle_hook() &rArr; sleep_manager_sleep_auto &rArr; hal_deepsleep &rArr; hal_sleep &rArr; mbed_interface_disconnect &rArr; semihost_disabledebug
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_rtx_idle.o(.data)
</UL>
<P><STRONG><a name="[1f5]"></a>compute_tick</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, .\build\mbed_ticker_api.o(i.compute_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = compute_tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>

<P><STRONG><a name="[208]"></a>initialize</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, .\build\mbed_ticker_api.o(i.initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
</UL>

<P><STRONG><a name="[20a]"></a>schedule_interrupt</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, .\build\mbed_ticker_api.o(i.schedule_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ticker_match_interval_passed
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[209]"></a>update_present_time</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, .\build\mbed_ticker_api.o(i.update_present_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[226]"></a>__get_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(i.__get_BASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[228]"></a>__get_CONTROL</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(i.__get_CONTROL))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[224]"></a>__get_IPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(i.__get_IPSR))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[225]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[1e9]"></a>os_kernel_is_active</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\rtx_lib.o(i.os_kernel_is_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[150]"></a>MessageQueueGet</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(i.MessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MessageQueueGet
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_dec32_nz
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_wr8
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[153]"></a>MessageQueuePut</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(i.MessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MessageQueuePut
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_3fd3b50e__atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[24e]"></a>MessageQueueRemove</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(i.MessageQueueRemove))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[230]"></a>__get_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(i.__get_BASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[22e]"></a>__get_IPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(i.__get_IPSR))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[22f]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[20b]"></a>isrRtxMessageQueueGet</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, .\build\rtx_msgqueue.o(i.isrRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[211]"></a>isrRtxMessageQueuePut</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, .\build\rtx_msgqueue.o(i.isrRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInsertPending
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[238]"></a>__get_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_mutex.o(i.__get_BASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[236]"></a>__get_IPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_mutex.o(i.__get_IPSR))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[237]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_mutex.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[155]"></a>SemaphoreTokenDecrement</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\rtx_semaphore.o(i.SemaphoreTokenDecrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SemaphoreTokenDecrement
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_eca73427__atomic_dec16_nz
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
</UL>

<P><STRONG><a name="[27a]"></a>__get_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(i.__get_BASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreGetCount
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[278]"></a>__get_IPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(i.__get_IPSR))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreGetCount
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[279]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreGetCount
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[215]"></a>isr_queue_get</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\rtx_system.o(i.isr_queue_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isr_queue_get
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_dec16_nz
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[218]"></a>isr_queue_put</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, .\build\rtx_system.o(i.isr_queue_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_inc16_lt
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[157]"></a>ThreadFlagsCheck</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, .\build\rtx_thread.o(i.ThreadFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ThreadFlagsCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_chk32_any
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_chk32_all
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[283]"></a>__get_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.__get_BASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetName
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadContextNew
</UL>

<P><STRONG><a name="[281]"></a>__get_IPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.__get_IPSR))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetName
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadContextNew
</UL>

<P><STRONG><a name="[282]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetName
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadContextNew
</UL>

<P><STRONG><a name="[265]"></a>osRtxKernelGetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osRtxKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[269]"></a>osRtxThreadFree</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryFree
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[266]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[2a5]"></a>osRtxThreadSetRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osRtxThreadSetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[276]"></a>TimerInsert</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, .\build\rtx_timer.o(i.TimerInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TimerInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[275]"></a>TimerUnlink</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\rtx_timer.o(i.TimerUnlink))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[204]"></a>gpio_write</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\serial_api.o(i.gpio_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = gpio_write &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>

<P><STRONG><a name="[28c]"></a>serial_flow_irq_set</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, .\build\serial_api.o(i.serial_flow_irq_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = serial_flow_irq_set &rArr; serial_irq_set_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_set_flow_control
</UL>

<P><STRONG><a name="[28d]"></a>serial_irq_set_internal</STRONG> (Thumb, 308 bytes, Stack size 28 bytes, .\build\serial_api.o(i.serial_irq_set_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = serial_irq_set_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_flow_irq_set
</UL>

<P><STRONG><a name="[2aa]"></a>uart_irq</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, .\build\serial_api.o(i.uart_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = uart_irq &rArr; gpio_write &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_irq
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_irq
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_irq
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_irq
</UL>

<P><STRONG><a name="[46]"></a>&lang;Func2&rang;</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\serialbase.o(i.<Func2>))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = &lang;Func2&rang; &rArr; mbed::Callback&lang;void()&rang;::Callback(void(*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
</UL>
<P><STRONG><a name="[15a]"></a>UnityAddMsgIfSpecified</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, .\build\unity.o(i.UnityAddMsgIfSpecified))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = UnityAddMsgIfSpecified &rArr; UnityPrint &rArr; UnityPrintNumberHex &rArr; utest_safe_putc &rArr; SingletonPtr&lang;GreenteaSerial&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
</UL>

<P><STRONG><a name="[162]"></a>UnityTestResultsBegin</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, .\build\unity.o(i.UnityTestResultsBegin))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = UnityTestResultsBegin &rArr; UnityPrintNumber &rArr; UnityPrintNumberUnsigned &rArr; utest_safe_putc &rArr; SingletonPtr&lang;GreenteaSerial&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_safe_putc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrintNumber
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityFail
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsFailBegin
</UL>

<P><STRONG><a name="[15d]"></a>UnityTestResultsFailBegin</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, .\build\unity.o(i.UnityTestResultsFailBegin))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = UnityTestResultsFailBegin &rArr; UnityTestResultsBegin &rArr; UnityPrintNumber &rArr; UnityPrintNumberUnsigned &rArr; utest_safe_putc &rArr; SingletonPtr&lang;GreenteaSerial&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest_safe_putc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityPrint
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityTestResultsBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnityAssertEqualNumber
</UL>

<P><STRONG><a name="[7e]"></a>test_failure_handler(utest::v1::failure_t)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\build\utest_greentea_handlers.o(i._Z20test_failure_handlerN5utest2v19failure_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = test_failure_handler(utest::v1::failure_t) &rArr; utest::v1::verbose_test_failure_handler(utest::v1::failure_t) &rArr; mbed::RawSerial::printf(const char*, ...) &rArr; operator new[] (unsigned) &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GREENTEA_TESTSUITE_RESULT(int)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::failure_t::failure_t(const utest::v1::failure_t&)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::verbose_test_failure_handler(utest::v1::failure_t)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest_greentea_handlers.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>selftest_failure_handler(utest::v1::failure_t)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, .\build\utest_greentea_handlers.o(i._Z24selftest_failure_handlerN5utest2v19failure_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = selftest_failure_handler(utest::v1::failure_t) &rArr; utest::v1::verbose_test_failure_handler(utest::v1::failure_t) &rArr; mbed::RawSerial::printf(const char*, ...) &rArr; operator new[] (unsigned) &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GREENTEA_TESTSUITE_RESULT(int)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::failure_t::failure_t(const utest::v1::failure_t&)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utest::v1::verbose_test_failure_handler(utest::v1::failure_t)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest_greentea_handlers.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>__sti___8_main_cpp_led1</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\main.o(i.__sti___8_main_cpp_led1))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = __sti___8_main_cpp_led1 &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_dir &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::Semaphore(int)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[d8]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_alloc_mt.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[f8]"></a>_freopen_locked</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fopen_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = _freopen_locked &rArr; _sys_open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[108]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_fp_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[43]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(scanf_char.o)(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[12e]"></a>_fp_value</STRONG> (Thumb, 588 bytes, Stack size 96 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(scanf_fp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
